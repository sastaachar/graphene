{"version":3,"sources":["store/nodeManager/models/nodeManagerActionTypes.ts","components/main/gnode/gnode.tsx","components/main/nodeManager/nodeManager.tsx","store/nodeManager/nodeManagerActions.ts","store/gnode/models/gnode.ts","App.tsx","reportWebVitals.ts","store/nodeManager/nodeManagerReducer.ts","store/rootStore.ts","index.tsx"],"names":["ADD_NODE","Gnode","props","gnode","data","mapDispatchToProps","addGnode","type","payload","connector","connect","state","nodeManager","NodeManager","useState","inputData","setInputData","onChange","e","target","value","onClick","newGnode","parseInt","id","uuidv4","visited","connections","graph","nodes","map","node","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","rootReducer","combineReducers","action","newState","push","rootStore","createStore","composeWithDevTools","ReactDOM","render","StrictMode","store","document","getElementById","console","log"],"mappings":"gMAGaA,EAAW,W,OCKXC,EAAyB,SAACC,GACnC,OACI,8BACI,2CAAcA,EAAMC,MAAMC,WCuBhCC,EAAqB,CACvBC,SC9BoB,SAACH,GAAD,MAAoC,CACxDI,KAAMP,EACNQ,QAAS,CAAEL,YDkCAM,EAHGC,aAPM,SAACC,GAAD,MAAsB,CAC1CC,YAAaD,EAAME,eAMoBR,EAG5BI,EA/BsB,SAACP,GAAkB,IAAD,EACjBY,mBAAS,IADQ,mBAC5CC,EAD4C,KACjCC,EADiC,KAUnD,OACI,gCACI,uBAAOT,KAAK,OAAOU,SAAU,SAACC,GAAD,OAAOF,EAAaE,EAAEC,OAAOC,UAC1D,wBAAQC,QAVO,WACnB,GAAIN,EAAW,CACX,IAAMO,GENUlB,EFMamB,SAASR,GELvC,CACHS,GAAIC,cACJrB,OACAsB,SAAS,EACTC,YAAa,KFETzB,EAAMI,SAASgB,GEPA,IAAClB,GFchB,0BACCF,EAAMU,YAAYgB,MAAMC,MAAMC,KAAI,SAACC,GAAD,OAC/B,cAAC,EAAD,CAAO5B,MAAO4B,GAAWA,EAAKP,aGjB/BQ,EAJW,WACtB,OAAO,cAAC,EAAD,KCSIC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCLRQ,EAA6B,CAC/Bd,MAAO,CACHC,MAAO,KCDTc,EAAcC,0BAAgB,CAAE/B,YDKqC,WAGvD,IAFhBF,EAEe,uDAFP+B,EACRG,EACe,uCACTC,EAAsB,eAAQnC,GACpC,OAAQkC,EAAOtC,MACX,KAAKP,EAED,OADA8C,EAASlB,MAAMC,MAAMkB,KAAKF,EAAOrC,QAAQL,OAClC2C,EACX,QACI,OAAOnC,MCbNqC,EAAmBC,sBAAYN,EAAaO,iCCEzDC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUC,MAAON,EAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,SAM5BvB,EAAgBwB,QAAQC,O","file":"static/js/main.ab017c0e.chunk.js","sourcesContent":["import { IGnode } from '../../gnode/models';\n\n// ACTION TYPES\nexport const ADD_NODE = 'ADD_NODE';\nexport const REMOVE_NODE = 'REMOVE_NODE';\n\nexport interface AddGnodeAction {\n    type: typeof ADD_NODE;\n    payload: {\n        gnode: IGnode;\n    };\n}\n\nexport interface RemoveGnodeAction {\n    type: typeof REMOVE_NODE;\n    payload: {\n        gnode: IGnode;\n    };\n}\nexport type NodeMangerAction = AddGnodeAction | RemoveGnodeAction;\n","import React from 'react';\nimport { IGnode } from '../../../store/gnode/models';\n\n// with cursive fonts\ninterface Props {\n    gnode: IGnode;\n}\n\nexport const Gnode: React.FC<Props> = (props: Props) => {\n    return (\n        <div>\n            <span>NODE : {props.gnode.data}</span>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { createGnode } from '../../../store/gnode/models';\nimport { addGnode } from '../../../store/nodeManager/nodeManagerActions';\nimport { AppState } from '../../../store/rootStore';\nimport { Gnode } from '../gnode';\n\ninterface Props extends PropsFromRedux {}\n\nconst NodeManager: React.FC<Props> = (props: Props) => {\n    const [inputData, setInputData] = useState('');\n\n    const onClickHandler = () => {\n        if (inputData) {\n            const newGnode = createGnode(parseInt(inputData));\n            props.addGnode(newGnode);\n        }\n    };\n\n    return (\n        <div>\n            <input type=\"text\" onChange={(e) => setInputData(e.target.value)} />\n            <button onClick={onClickHandler}>NODE Manager</button>\n            {props.nodeManager.graph.nodes.map((node) => (\n                <Gnode gnode={node} key={node.id} />\n            ))}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    nodeManager: state.NodeManager,\n});\nconst mapDispatchToProps = {\n    addGnode: addGnode,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(NodeManager);\n","// action creator\n\nimport { IGnode } from '../gnode/models';\nimport { AddGnodeAction, ADD_NODE } from './models/nodeManagerActionTypes';\n\nexport const addGnode = (gnode: IGnode): AddGnodeAction => ({\n    type: ADD_NODE,\n    payload: { gnode },\n});\n","import { v4 as uuidv4 } from 'uuid';\n\nexport interface IGnode {\n    id: string;\n    data: number;\n    visited: boolean;\n    connections: number[];\n}\n\nexport const createGnode = (data: number): IGnode => {\n    return {\n        id: uuidv4(),\n        data,\n        visited: false,\n        connections: [],\n    };\n};\n","import React from 'react';\n\nimport { NodeManager } from './components/main/nodeManager';\n\nconst App: React.FC<{}> = () => {\n    return <NodeManager></NodeManager>;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Reducer } from 'redux';\nimport { INodeManager } from './models';\nimport { ADD_NODE, NodeMangerAction } from './models/nodeManagerActionTypes';\n\nconst defaultState: INodeManager = {\n    graph: {\n        nodes: [],\n    },\n};\n\nexport const NodeManagerReducer: Reducer<INodeManager, NodeMangerAction> = (\n    state = defaultState,\n    action: NodeMangerAction,\n): INodeManager => {\n    const newState: INodeManager = { ...state };\n    switch (action.type) {\n        case ADD_NODE:\n            newState.graph.nodes.push(action.payload.gnode);\n            return newState;\n        default:\n            return state;\n    }\n};\n","import { combineReducers, createStore, Store } from 'redux';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { NodeManagerReducer } from './nodeManager/nodeManagerReducer';\n\nconst rootReducer = combineReducers({ NodeManager: NodeManagerReducer });\nexport type AppState = ReturnType<typeof rootReducer>;\nexport const rootStore: Store = createStore(rootReducer, composeWithDevTools());\nexport type AppDispatch = typeof rootStore.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { rootStore } from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={rootStore}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}