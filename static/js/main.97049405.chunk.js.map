{"version":3,"sources":["dataStructures/queue.ts","dataStructures/stack.ts","dataStructures/priorityQueue.ts","store/nodeManager/algorithms/helpers.ts","store/nodeManager/algorithms/bfs.ts","store/nodeManager/algorithms/dfs.ts","store/nodeManager/algorithms/dijkstra.ts","store/nodeManager/algorithms/graphGrouping.ts","store/nodeManager/models/nodeManagerActionTypes.ts","store/nodeManager/nodeManagerActions.ts","components/shared/checkbox/checkbox.tsx","components/shared/select-search/selectSearch.tsx","components/pages/main/gnode/gnode.tsx","components/pages/main/path/path.tsx","components/pages/main/nodeManager/graphColors.ts","components/pages/main/nodeManager/nodeManager.tsx","store/path/models/path.ts","store/gnode/models/gnode.ts","App.tsx","store/nodeManager/nodeManagerReducer.ts","store/rootStore.ts","index.tsx"],"names":["Queue","queue","this","length","shift","element","push","Stack","stack","unshift","Lesser","a","b","PriorityQueue","compare","pQueue","ele","left","right","midPos","Math","floor","pos","getPos","splice","visitNode","node","newNode","visited","touchNode","state","bfs","graph","updateNode","rootID","console","log","q","delay","curId","pop","cur","nodes","id","setTimeout","connections","forEach","conn","curNode","nodeID","empty","dfs","s","dijkstra","updatePath","costs","cost","pred","pathID","parentID","Object","values","Infinity","data","destinationID","pathCost","paths","weight","prev","connPath","path","newPath","visitPath","keys","groupGraph","groupColors","groupId","groupColor","color","group","groupNode","ADD_NODE","UPDATE_NODE","ADD_PATH","SET_ROOT","UNVISIT_ALL","UPDATE_PATH","SET_DESTINATION","updatedNode","type","payload","Checkbox","props","classNameInput","isChecked","className","onClick","SearchIcon","width","height","viewBox","fill","xmlns","d","SelectSearch","ref","cb","useState","searchText","setsearchText","selectedOption","setSelectedOption","showBar","setShowBar","inputBar","createRef","searchBar","useEffect","handleOutsideClick","event","current","contains","target","document","addEventListener","removeEventListener","options","undefined","defaultSelectKey","defalutSelection","filter","e","key","focus","setOptionState","value","defaultSlectText","onChange","toLocaleLowerCase","includes","map","option","mapDispatchToProps","connector","connect","isSelected","gnode","isTouched","classNameOutside","classNameInside","isRoot","isDestination","style","x","top","y","innerStyle","backgroundColor","onNodeSelect","Path","stroke","x1","sourcePos","y1","x2","destinationPos","y2","position","fontSize","graphColors","addGnode","addPath","setRoot","unvisitAll","updatedPath","setDestination","nodeManager","NodeManager","inputData","setInputData","boardRef","useRef","modeState","setModeState","algorithmState","setAlgorithmState","sourceNode","setSourceNode","autoIncrement","setAutoIncrement","createPathOnClick","destinationNode","unselectSourceNode","i","source","destination","parseInt","uuidv4","sourceId","destinationId","selectedNode","updateModeSelection","updateNodePairs","htmlFor","intValue","nodeValue","newGnode","pageX","offsetLeft","scrollLeft","pageY","offsetTop","scrollTop","App","defaultState","rootReducer","combineReducers","action","newState","sourceOldConnections","destOldConnections","previousNode","previousPath","rootStore","createStore","composeWithDevTools","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.97049405.chunk.js","sourcesContent":["export default class Queue<T> {\n  private queue: T[];\n\n  constructor() {\n    this.queue = [];\n  }\n\n  front(): T | undefined {\n    if (this.queue.length === 0) return undefined;\n    return this.queue[0];\n  }\n\n  pop(): T | undefined {\n    // remove from front\n    return this.queue.shift();\n  }\n\n  push(element: T) {\n    // add at rear\n    this.queue.push(element);\n  }\n\n  empty(): boolean {\n    return this.queue.length === 0;\n  }\n}\n","export default class Stack<T> {\n  private stack: T[];\n\n  constructor() {\n    this.stack = [];\n  }\n\n  top(): T | undefined {\n    if (this.stack.length === 0) return undefined;\n    return this.stack[0];\n  }\n\n  pop(): T | undefined {\n    // remove from front\n    return this.stack.shift();\n  }\n\n  push(element: T) {\n    // add at front\n    this.stack.unshift(element);\n  }\n\n  empty(): boolean {\n    return this.stack.length === 0;\n  }\n}\n","export function Lesser<T>(a: T, b: T): boolean {\n  return a <= b;\n}\nexport function Greater<T>(a: T, b: T): boolean {\n  return a >= b;\n}\n\nexport type Comparator<T> = (a: T, b: T) => boolean;\n\nexport default class PriorityQueue<T> {\n  private pQueue: T[];\n  private compare: Comparator<T>;\n\n  private getPos(ele: T, left: number, right: number): number {\n    while (left <= right) {\n      if (left === right) {\n        return this.compare(ele, this.pQueue[left]) ? left : left + 1;\n      }\n      const midPos = Math.floor((left + right) / 2);\n\n      if (this.compare(ele, this.pQueue[midPos])) {\n        right = midPos - 1;\n      } else {\n        left = midPos + 1;\n      }\n    }\n\n    return 0;\n  }\n\n  constructor(compare: Comparator<T> = Lesser) {\n    this.pQueue = [];\n    this.compare = compare;\n  }\n\n  front(): T | undefined {\n    if (this.pQueue.length === 0) return undefined;\n    return this.pQueue[0];\n  }\n\n  pop(): T | undefined {\n    // remove from front\n    return this.pQueue.shift();\n  }\n\n  push(element: T) {\n    const pos = this.getPos(element, 0, this.pQueue.length - 1);\n    this.pQueue.splice(pos, 0, element);\n  }\n\n  empty(): boolean {\n    return this.pQueue.length === 0;\n  }\n}\n","import { IGnode } from '../../gnode/models';\nimport { IPath } from '../../path/models';\nimport { Color } from '../../sharedModels';\n\nexport interface Visited {\n  [key: string]: boolean;\n}\n\nexport const visitNode = (node: IGnode) => {\n  const newNode = { ...node };\n  newNode.visited = true;\n  return newNode;\n};\n\nexport const visitPath = (path: IPath) => {\n  const newPath = { ...path };\n  newPath.state = 'travel';\n  return newPath;\n};\n\nexport const touchNode = (node: IGnode) => {\n  const newNode = { ...node };\n  newNode.state = 'touched';\n  return newNode;\n};\n\nexport const groupNode = (node: IGnode, id: string, color: Color) => {\n  const newNode = { ...node };\n  newNode.state = 'grouped';\n  newNode.group = {\n    id,\n    color,\n  };\n  return newNode;\n};\n","import { Queue } from '../../../dataStructures';\nimport { IGnode } from '../../gnode/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction } from '../models/nodeManagerActionTypes';\nimport { touchNode, Visited, visitNode } from './helpers';\n\nconst bfs = (graph: IGraph, updateNode: (x: IGnode) => UpdateNodeAction) => {\n  if (!graph.rootID) {\n    console.log('Root is not set');\n    return;\n  }\n\n  console.log('Starting BFS');\n\n  const q = new Queue<string>();\n  q.push(graph.rootID);\n\n  const visited: Visited = {};\n\n  let delay: number = 0;\n\n  while (!q.empty()) {\n    const curId = q.pop() as string;\n    console.log(curId);\n    const cur = graph.nodes[curId];\n    visited[cur.id] = true;\n\n    setTimeout(() => {\n      updateNode(visitNode(cur));\n    }, delay);\n\n    delay += 300;\n\n    graph.nodes[cur.id].connections.forEach((conn) => {\n      const curNode = graph.nodes[conn.nodeID];\n      if (!visited[conn.nodeID]) {\n        q.push(conn.nodeID);\n        setTimeout(() => {\n          updateNode(touchNode(curNode));\n        }, delay);\n      }\n    });\n  }\n\n  console.log('BFS finished');\n};\n\nexport default bfs;\n","import { Stack } from '../../../dataStructures';\nimport { IGnode } from '../../gnode/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction } from '../models/nodeManagerActionTypes';\nimport { touchNode, Visited, visitNode } from './helpers';\n\nconst dfs = (graph: IGraph, updateNode: (x: IGnode) => UpdateNodeAction) => {\n  if (!graph.rootID) {\n    console.log('Root is not set');\n    return;\n  }\n\n  console.log('Starting DFS');\n\n  const s = new Stack<string>();\n  s.push(graph.rootID);\n\n  const visited: Visited = {};\n\n  let delay: number = 0;\n\n  while (!s.empty()) {\n    const curId = s.pop() as string;\n    console.log(curId);\n    const cur = graph.nodes[curId];\n    visited[cur.id] = true;\n\n    setTimeout(() => {\n      updateNode(visitNode(cur));\n    }, delay);\n\n    delay += 300;\n\n    graph.nodes[cur.id].connections.forEach((conn) => {\n      const curNode = graph.nodes[conn.nodeID];\n      if (!visited[conn.nodeID]) {\n        s.push(conn.nodeID);\n        setTimeout(() => {\n          updateNode(touchNode(curNode));\n        }, delay);\n      }\n    });\n  }\n\n  console.log('DFS finished');\n};\n\nexport default dfs;\n","import { PriorityQueue } from '../../../dataStructures';\nimport { IGnode } from '../../gnode/models';\nimport { IPath } from '../../path/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction, UpdatePathAction } from '../models/nodeManagerActionTypes';\nimport { touchNode, Visited, visitNode, visitPath } from './helpers';\n\n// there should be no negative weights\n\ninterface PathCost {\n  cost: number;\n  nodeID: string;\n}\n\ninterface Costs {\n  [key: string]: number;\n}\ntype PrevState = {\n  pathID: string | null;\n  parentID: string | null;\n};\ninterface Predecessor {\n  [key: string]: PrevState;\n}\n\nconst dijkstra = (\n  graph: IGraph,\n  updateNode: (x: IGnode) => UpdateNodeAction,\n  updatePath: (x: IPath) => UpdatePathAction,\n) => {\n  if (!graph.rootID) {\n    console.log('Root is not set');\n    return;\n  }\n\n  console.log('Starting Dijkstra');\n\n  const compare = (a: PathCost, b: PathCost): boolean => {\n    return a.cost <= b.cost;\n  };\n\n  const costs: Costs = {};\n  const visited: Visited = {};\n  const q = new PriorityQueue<PathCost>(compare);\n\n  const pred: Predecessor = {};\n\n  pred[graph.rootID] = { pathID: null, parentID: null };\n\n  Object.values(graph.nodes).forEach((node) => {\n    costs[node.id] = Infinity;\n  });\n\n  costs[graph.rootID] = 0;\n  q.push({ cost: 0, nodeID: graph.rootID });\n\n  let delay: number = 0;\n\n  while (!q.empty()) {\n    const cur = q.pop() as PathCost;\n\n    console.log(graph.nodes[cur.nodeID].data);\n    const curNode = graph.nodes[cur.nodeID];\n    visited[cur.nodeID] = true;\n\n    setTimeout(() => {\n      updateNode(visitNode(curNode));\n    }, delay);\n\n    delay += 300;\n\n    // if destination is set - break preemptively\n    if (graph.destinationID === cur.nodeID) break;\n\n    graph.nodes[cur.nodeID].connections.forEach((conn) => {\n      const pathCost = graph.paths[conn.pathID].weight ?? 0;\n      if (!visited[conn.nodeID] && costs[conn.nodeID] > cur.cost + pathCost) {\n        costs[conn.nodeID] = cur.cost + pathCost;\n        q.push({ cost: costs[conn.nodeID], nodeID: conn.nodeID });\n        setTimeout(() => {\n          updateNode(touchNode(curNode));\n        }, delay);\n        pred[conn.nodeID] = { parentID: cur.nodeID, pathID: conn.pathID };\n      }\n    });\n  }\n\n  if (graph.destinationID) {\n    // destination id is set so we can find path\n\n    // check if no path exists\n\n    let prev: string | null = graph.destinationID;\n\n    while (prev) {\n      // update path\n\n      const connPath: PrevState = pred[prev];\n\n      if (!connPath) {\n        // prev was never visted\n        console.log(\"Can't reach \", prev);\n        break;\n      }\n      setTimeout(() => {\n        if (connPath.pathID) updatePath(visitPath(graph.paths[connPath.pathID]));\n      }, delay);\n\n      delay += 300;\n      prev = connPath.parentID;\n    }\n  }\n\n  Object.keys(costs).forEach((id) => {\n    console.log(graph.nodes[id].data, costs[id]);\n  });\n\n  console.log('Dijkstra finished');\n};\n\nexport default dijkstra;\n","// we will color the diffrentt island in graph\n// perform bfs on the graph for grouping\n\nimport { Queue } from '../../../dataStructures';\nimport { IGnode } from '../../gnode/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction } from '../models/nodeManagerActionTypes';\nimport { groupNode, touchNode, Visited } from './helpers';\n\nimport { Color } from '../../sharedModels';\n\nconst groupGraph = (graph: IGraph, groupColors: Color[], updateNode: (x: IGnode) => UpdateNodeAction) => {\n  console.log('Starting Grouping');\n\n  const visited: Visited = {};\n  let delay: number = 0;\n  let groupId = -1;\n\n  Object.values(graph.nodes).forEach((node) => {\n    if (visited[node.id]) return;\n    ++groupId;\n    const groupColor = groupColors[groupId % groupColors.length];\n    const q = new Queue<string>();\n    q.push(node.id);\n    while (!q.empty()) {\n      const curId = q.pop() as string;\n      console.log(curId);\n      const cur = graph.nodes[curId];\n      visited[cur.id] = true;\n\n      setTimeout(() => {\n        updateNode(groupNode(cur, '' + groupId, groupColor));\n      }, delay);\n\n      delay += 150;\n\n      graph.nodes[cur.id].connections.forEach((conn) => {\n        const curNode = graph.nodes[conn.nodeID];\n        if (!visited[conn.nodeID]) {\n          q.push(conn.nodeID);\n          setTimeout(() => {\n            updateNode(touchNode(curNode));\n          }, delay);\n        }\n      });\n    }\n  });\n\n  console.log('Grouping finished');\n};\n\nexport default groupGraph;\n","import { IGnode } from '../../gnode/models';\nimport { IPath } from '../../path/models';\n\n// ACTION TYPES\nexport const ADD_NODE = 'ADD_NODE';\nexport interface AddGnodeAction {\n  type: typeof ADD_NODE;\n  payload: { gnode: IGnode };\n}\nexport const REMOVE_NODE = 'REMOVE_NODE';\nexport interface RemoveGnodeAction {\n  type: typeof REMOVE_NODE;\n  payload: { nodeID: string };\n}\nexport const UPDATE_NODE = 'UPDATE_NODE';\n\nexport interface UpdateNodeAction {\n  type: typeof UPDATE_NODE;\n  payload: { updatedNode: IGnode };\n}\n\nexport const ADD_PATH = 'ADD_PATH';\n\nexport interface AddPathAction {\n  type: typeof ADD_PATH;\n  payload: { path: IPath };\n}\nexport const REMOVE_PATH = 'REMOVE_PATH';\nexport interface RemovePathAction {\n  type: typeof REMOVE_PATH;\n  payload: { pathID: string };\n}\n\nexport const SET_ROOT = 'SET_ROOT';\nexport interface SetRootAction {\n  type: typeof SET_ROOT;\n  payload: { nodeID: string | undefined };\n}\n\nexport const UNVISIT_ALL = 'UNVISIT_ALL';\nexport interface UnvisitAllAction {\n  type: typeof UNVISIT_ALL;\n}\n\nexport const UPDATE_PATH = 'UPDATE_PATH';\n\nexport interface UpdatePathAction {\n  type: typeof UPDATE_PATH;\n  payload: { updatedPath: IPath };\n}\n\nexport const SET_DESTINATION = 'SET_DESTINATION';\n\nexport interface SetDestinationAction {\n  type: typeof SET_DESTINATION;\n  payload: { nodeID: string | undefined };\n}\n\nexport type NodeMangerAction =\n  | AddGnodeAction\n  | RemoveGnodeAction\n  | AddPathAction\n  | RemovePathAction\n  | UpdateNodeAction\n  | SetRootAction\n  | UnvisitAllAction\n  | UpdatePathAction\n  | SetDestinationAction;\n","// action creator\n\nimport { IGnode } from '../gnode/models';\nimport { IPath } from '../path/models';\nimport {\n  AddGnodeAction,\n  ADD_NODE,\n  AddPathAction,\n  ADD_PATH,\n  UpdateNodeAction,\n  UPDATE_NODE,\n  SetRootAction,\n  SET_ROOT,\n  UnvisitAllAction,\n  UNVISIT_ALL,\n  UpdatePathAction,\n  UPDATE_PATH,\n  SetDestinationAction,\n  SET_DESTINATION,\n} from './models/nodeManagerActionTypes';\n\nexport const addGnode = (gnode: IGnode): AddGnodeAction => ({\n  type: ADD_NODE,\n  payload: { gnode },\n});\n\nexport const addPath = (path: IPath): AddPathAction => ({\n  type: ADD_PATH,\n  payload: { path },\n});\n\nexport const updateNode = (updatedNode: IGnode): UpdateNodeAction => ({\n  type: UPDATE_NODE,\n  payload: { updatedNode },\n});\n\nexport const setRoot = (nodeID: string | undefined): SetRootAction => ({\n  type: SET_ROOT,\n  payload: { nodeID },\n});\n\nexport const unvisitAll = (): UnvisitAllAction => ({\n  type: UNVISIT_ALL,\n});\n\nexport const updatePath = (updatedPath: IPath): UpdatePathAction => ({\n  type: UPDATE_PATH,\n  payload: { updatedPath },\n});\n\nexport const setDestination = (nodeID: string | undefined): SetDestinationAction => ({\n  type: SET_DESTINATION,\n  payload: { nodeID },\n});\n","import React, { MouseEventHandler } from 'react';\nimport './checkbox.scss';\n\ninterface CheckboxProps {\n  isChecked: boolean;\n  onClick: MouseEventHandler<HTMLDivElement>;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = (props: CheckboxProps) => {\n  let classNameInput = 'checkbox-input';\n  if (props.isChecked) classNameInput += ' checkbox-on';\n  return <div className={classNameInput} onClick={props.onClick}></div>;\n};\n\nexport default Checkbox;\n","import React, { createRef, RefObject, useEffect, useState } from 'react';\n\nimport './selectSearch.scss';\n\ninterface Option {\n  key: string | number;\n  value: string;\n}\n\ninterface SelectSearchProps {\n  defaultSlectText: string;\n  options: Option[];\n  defaultSelectKey?: string | number;\n  setOptionState?: Function;\n}\n\nconst SearchIcon = () => {\n  return (\n    <svg width=\"17\" height=\"17\" viewBox=\"0 0 17 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M16.7688 14.6976L13.4582 11.3876C13.3088 11.2382 13.1062 11.1552 12.8937 11.1552H12.3525C13.2689 9.9832 13.8135 8.50913 13.8135 6.90558C13.8135 3.09091 10.7221 0 6.90676 0C3.09144 0 0 3.09091 0 6.90558C0 10.7202 3.09144 13.8112 6.90676 13.8112C8.51058 13.8112 9.98491 13.2667 11.1571 12.3504V12.8915C11.1571 13.104 11.2401 13.3065 11.3895 13.4559L14.7001 16.7659C15.0122 17.078 15.517 17.078 15.8258 16.7659L16.7655 15.8264C17.0776 15.5143 17.0776 15.0097 16.7688 14.6976ZM6.90676 11.1552C4.55912 11.1552 2.65644 9.25613 2.65644 6.90558C2.65644 4.55834 4.5558 2.65599 6.90676 2.65599C9.25439 2.65599 11.1571 4.55502 11.1571 6.90558C11.1571 9.25281 9.25771 11.1552 6.90676 11.1552Z\"\n        fill=\"#26408B\"\n      />\n    </svg>\n  );\n};\n\nconst SelectSearch: React.FC<SelectSearchProps> = (props: SelectSearchProps) => {\n  const [searchText, setsearchText] = useState('');\n  const [selectedOption, setSelectedOption] = useState<Option>();\n  const [showBar, setShowBar] = useState<boolean>(false);\n  const inputBar = createRef<HTMLInputElement>();\n\n  const handleOutsideClick = () => {\n    if (showBar) setShowBar(false);\n  };\n\n  const searchBar = createRef<HTMLDivElement>();\n  useOutsideClick(searchBar, handleOutsideClick);\n\n  useEffect(() => {\n    if (props.options.length > 0 && props.defaultSelectKey != undefined) {\n      const defalutSelection = props.options.filter((e) => {\n        if (e.key === props.defaultSelectKey) return e;\n      });\n\n      if (defalutSelection.length > 0) {\n        setSelectedOption(defalutSelection[0]);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (showBar) inputBar.current?.focus();\n  }, [showBar]);\n  useEffect(() => {\n    if (props.setOptionState) props.setOptionState(selectedOption?.key);\n  }, [selectedOption]);\n\n  const searchFilter = (ele: Option) => {\n    if (ele.value.toLocaleLowerCase().includes(searchText.toLocaleLowerCase())) return ele;\n  };\n\n  const handleToggleShow = () => {\n    setShowBar(!showBar);\n  };\n\n  return (\n    <div className={'select-search'} ref={searchBar} onClick={handleToggleShow}>\n      <div className={'select-search-selected' + (showBar ? ' two-rounded' : ' all-rounded')}>\n        <div className=\"select-search-selected-value\">\n          <span>{selectedOption?.value || props.defaultSlectText}</span>\n        </div>\n        <div className={'select-search-selected-button' + (showBar ? ' down-arrow' : ' left-arrow')}></div>\n      </div>\n      {showBar && (\n        <div className=\"select-search-bar\">\n          <div className=\"input-box\">\n            <span>\n              <SearchIcon />\n            </span>\n            <input type=\"text\" onChange={(e) => setsearchText(e.target.value)} ref={inputBar} value={searchText} />\n          </div>\n          {props.options.filter(searchFilter).map((option) => (\n            <div key={option.key} className=\"select-search-option\" onClick={() => setSelectedOption(option)}>\n              <span>{option.value}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// arrow function gives error and i dont want to use the work around\nfunction useOutsideClick(ref: RefObject<any>, cb: any): void {\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      if (ref.current?.contains && !ref.current.contains(event.target)) {\n        cb();\n      }\n    };\n\n    // bind the listner\n    document.addEventListener('mousedown', handleOutsideClick);\n    return () => {\n      // remove the listner\n      document.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, [ref]);\n}\n\nexport default SelectSearch;\n","import React, { CSSProperties } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { IGnode } from '../../../../store/gnode/models';\n\nimport { updateNode } from '../../../../store/nodeManager/nodeManagerActions';\n\nimport './gnode.scss';\n\ninterface Props extends PropsFromRedux {\n  gnode: IGnode;\n  isRoot?: boolean;\n  isDestination?: boolean;\n  onNodeSelect: (node: IGnode) => void;\n}\n\nconst Gnode: React.FC<Props> = (props: Props) => {\n  const isSelected = props.gnode.state === 'selected',\n    isTouched = props.gnode.state === 'touched';\n  let classNameOutside = 'gnode';\n  classNameOutside += isSelected\n    ? ' gnode--selected'\n    : props.gnode.visited\n    ? ' gnode--visited'\n    : isTouched\n    ? ' gnode--touched'\n    : '';\n\n  let classNameInside = 'gnode-inner';\n  classNameInside += props.isRoot ? ' gnode--root' : props.isDestination ? ' gnode--destination' : '';\n\n  const style: CSSProperties = {\n    left: props.gnode.pos.x - 50,\n    top: props.gnode.pos.y - 50,\n  };\n\n  const handleOnClick = () => {\n    props.onNodeSelect(props.gnode);\n  };\n\n  const innerStyle: CSSProperties = {};\n  if (props.gnode.state === 'grouped') {\n    const color = props.gnode.group?.color ?? [0, 0, 0, 0];\n    innerStyle.backgroundColor = `rgba(${color[0]},${color[1]},${color[2]},${color[3]})`;\n  }\n\n  return (\n    <div className={classNameOutside} style={style} onClick={handleOnClick}>\n      <div className={classNameInside} style={innerStyle}>\n        <span className=\"gnode-inner-content\">{props.gnode.data}</span>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = () => ({});\nconst mapDispatchToProps = {\n  updateNode,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Gnode);\n","import React, { CSSProperties } from 'react';\nimport { IPath } from '../../../../store/path/models';\n\nimport './path.scss';\n\ninterface Props {\n  path: IPath;\n}\n\nexport const Path: React.FC<Props> = (props) => {\n  const style: CSSProperties = { stroke: props.path.state === 'travel' ? 'var(--green)' : 'var(--primary-darker)' };\n  return (\n    <div className=\"path-wrapper\">\n      <svg className=\"path\" width=\"100%\" height=\"100%\">\n        <line\n          x1={props.path.sourcePos.x}\n          y1={props.path.sourcePos.y}\n          x2={props.path.destinationPos.x}\n          y2={props.path.destinationPos.y}\n          style={style}\n        />\n      </svg>\n      {/* -20 - makes its closer the line looks better imo */}\n      <span\n        style={{\n          position: 'absolute',\n          left: (props.path.sourcePos.x + props.path.destinationPos.x) / 2,\n          top: (props.path.sourcePos.y + props.path.destinationPos.y - 20) / 2,\n          color: 'var(--yellow)',\n          fontSize: '20px',\n        }}\n      >\n        {props.path.weight}\n      </span>\n    </div>\n  );\n};\n","import { Color } from '../../../../store/sharedModels';\n\nexport const graphColors: Color[] = [\n  [64, 249, 155, 1],\n  [38, 64, 139, 1],\n  [249, 248, 113, 1],\n  [15, 8, 75, 1],\n  [136, 106, 190, 1],\n  [0, 219, 203, 1],\n  [175, 245, 136, 1],\n  [252, 126, 139, 1],\n  [0, 89, 166, 1],\n  [149, 74, 0, 1],\n  [241, 150, 46, 1],\n  [8, 178, 227, 1],\n];\n","import React, { MouseEvent, useRef, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { createGnode, IGnode } from '../../../../store/gnode/models';\nimport { bfs, dfs, dijkstra } from '../../../../store/nodeManager/algorithms';\nimport groupGraph from '../../../../store/nodeManager/algorithms/graphGrouping';\nimport {\n  addGnode,\n  addPath,\n  setDestination,\n  setRoot,\n  unvisitAll,\n  updateNode,\n  updatePath,\n} from '../../../../store/nodeManager/nodeManagerActions';\nimport { createPath } from '../../../../store/path/models';\nimport { AppState } from '../../../../store/rootStore';\nimport { Checkbox } from '../../../shared/checkbox';\nimport { SelectSearch } from '../../../shared/select-search';\nimport { Gnode } from '../gnode';\nimport { Path } from '../path';\nimport { graphColors } from './graphColors';\n\nimport './nodeManager.scss';\n\ninterface Props extends PropsFromRedux {}\n\nconst NodeManager: React.FC<Props> = (props: Props) => {\n  // for node data input\n  const [inputData, setInputData] = useState('');\n\n  const boardRef = useRef<HTMLDivElement>(null);\n\n  const [modeState, setModeState] = useState(0);\n  const [algorithmState, setAlgorithmState] = useState(0);\n  const [sourceNode, setSourceNode] = useState<IGnode | null>(null);\n  const [autoIncrement, setAutoIncrement] = useState(false);\n\n  // create node\n  const createNodeOnClick = (e: MouseEvent<HTMLDivElement>) => {\n    if (modeState != 0) return;\n    if (inputData) {\n      const intValue = parseInt(inputData);\n      const nodeValue = intValue || inputData;\n      console.log(intValue, nodeValue, intValue ?? inputData);\n      const newGnode = createGnode(nodeValue, {\n        x: e.pageX - (boardRef.current?.offsetLeft ?? 0) + (boardRef.current?.scrollLeft ?? 0),\n        y: e.pageY - (boardRef.current?.offsetTop ?? 0) + (boardRef.current?.scrollTop ?? 0),\n      });\n\n      props.addGnode(newGnode);\n      if ((intValue === 0 || intValue) && autoIncrement) {\n        setInputData(intValue + 1 + '');\n      }\n    }\n  };\n\n  // create path\n  const createPathOnClick = (sourceNode: IGnode, destinationNode: IGnode) => {\n    if (destinationNode.id === sourceNode.id) {\n      // no self loops for now\n      console.log('No self loops');\n      unselectSourceNode();\n      return;\n    }\n\n    // check if path already exists\n    const connections = props.nodeManager.graph.nodes[sourceNode.id].connections;\n    for (let i = 0; i < connections.length; i++) {\n      const conn = connections[i];\n      if (conn.nodeID === destinationNode.id) {\n        // path already exists\n        console.log('Path already exists');\n        unselectSourceNode();\n        return;\n      }\n    }\n\n    const newPath = createPath(sourceNode, destinationNode, parseInt(inputData));\n    props.addPath(newPath);\n\n    unselectSourceNode();\n    return;\n  };\n\n  const unselectSourceNode = () => {\n    if (!sourceNode) return;\n    // we need to use the latest version to update\n    // TODO : use a property based update system\n    const selectedNode = props.nodeManager.graph.nodes[sourceNode.id];\n    selectedNode.state = 'default';\n    props.updateNode(selectedNode);\n    setSourceNode(null);\n  };\n\n  // create path\n  const updateNodePairs = (node: IGnode) => {\n    if (!sourceNode) {\n      setSourceNode(node);\n      node.state = 'selected';\n      props.updateNode(node);\n      return;\n    }\n    // source is set\n    createPathOnClick(sourceNode, node);\n  };\n\n  const optionsMode = [\n    { key: 0, value: 'Create Node' },\n    { key: 1, value: 'Create Path' },\n    { key: 2, value: 'Set Root' },\n    { key: 3, value: 'Set Destination' },\n  ];\n\n  const updateModeSelection = (node: IGnode) => {\n    // node is selected : do stuff to handle that\n    switch (modeState) {\n      case 1:\n        // update node pairs to create path\n        updateNodePairs(node);\n        break;\n      case 2:\n        // set node as root\n        if (props.nodeManager.graph.rootID !== node.id) props.setRoot(node.id);\n        else props.setRoot(undefined);\n\n        break;\n\n      case 3:\n        if (props.nodeManager.graph.destinationID !== node.id) props.setDestination(node.id);\n        else props.setDestination(undefined);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const optionsAlgorithm = [\n    { key: 0, value: 'BFS' },\n    { key: 1, value: 'DFS' },\n    { key: 2, value: 'Dijkstra' },\n    { key: 3, value: 'Group graph' },\n  ];\n\n  const updateAlgoSelection = () => {\n    switch (algorithmState) {\n      case 0:\n        bfs(props.nodeManager.graph, props.updateNode);\n        break;\n\n      case 1:\n        dfs(props.nodeManager.graph, props.updateNode);\n        break;\n\n      case 2:\n        dijkstra(props.nodeManager.graph, props.updateNode, props.updatePath);\n        break;\n\n      case 3:\n        groupGraph(props.nodeManager.graph, graphColors, props.updateNode);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"nodemanager\">\n      <div className=\"left-panel\">\n        <input\n          type=\"text\"\n          className=\"left-panel-input small-box\"\n          value={inputData}\n          onChange={(e) => setInputData(e.target.value)}\n        />\n        <div className=\"left-panel-selection\">\n          <span>mode :</span>\n          <SelectSearch\n            options={optionsMode}\n            defaultSlectText=\"Select Mode\"\n            defaultSelectKey={0}\n            setOptionState={setModeState}\n          ></SelectSearch>\n        </div>\n        <div className=\"left-panel-selection\">\n          <span>algorithm :</span>\n          <SelectSearch\n            options={optionsAlgorithm}\n            defaultSlectText=\"Select Mode\"\n            defaultSelectKey={0}\n            setOptionState={setAlgorithmState}\n          ></SelectSearch>\n        </div>\n\n        <button className=\"left-panel-start small-box\" onClick={updateAlgoSelection}>\n          start\n        </button>\n\n        <button className=\"small-box\" onClick={() => props.unvisitAll()}>\n          unvisit all\n        </button>\n\n        {modeState === 0 && (\n          <div className=\"left-panel-checkbox-wrapper\">\n            <label htmlFor=\"\">auto-increment</label>\n            <Checkbox isChecked={autoIncrement} onClick={() => setAutoIncrement(!autoIncrement)} />\n          </div>\n        )}\n      </div>\n      <div className=\"right-panel\" onClick={createNodeOnClick} ref={boardRef}>\n        {Object.values(props.nodeManager.graph.nodes).map((node) => (\n          <Gnode\n            key={node.id}\n            gnode={node}\n            onNodeSelect={updateModeSelection}\n            isRoot={node.id === props.nodeManager.graph.rootID}\n            isDestination={node.id === props.nodeManager.graph.destinationID}\n          />\n        ))}\n        {Object.values(props.nodeManager.graph.paths).map((path) => (\n          <Path key={path.id} path={path} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  nodeManager: state.NodeManager,\n});\nconst mapDispatchToProps = {\n  addGnode,\n  addPath,\n  setRoot,\n  updateNode,\n  unvisitAll,\n  updatePath,\n  setDestination,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(NodeManager);\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { Position } from '../../sharedModels';\n\ntype PathState = 'default' | 'travel';\n\nexport interface IPath {\n  id: string;\n  sourceId: string;\n  destinationId: string;\n  sourcePos: Position;\n  destinationPos: Position;\n  state: PathState;\n  weight?: number;\n}\n\nexport const createPath = (\n  source: { id: string; pos: Position },\n  destination: { id: string; pos: Position },\n  weight?: number,\n): IPath => {\n  return {\n    id: uuidv4(),\n    sourceId: source.id,\n    destinationId: destination.id,\n    sourcePos: source.pos,\n    destinationPos: destination.pos,\n    state: 'default',\n    weight: weight || undefined,\n  };\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { Position } from '../../sharedModels';\n\nimport { Color } from '../../sharedModels';\n\ntype NodeStates = 'default' | 'root' | 'selected' | 'touched' | 'grouped';\n\nexport interface Connection {\n  nodeID: string;\n  pathID: string;\n}\nexport interface IGnode {\n  id: string;\n  data: number | string;\n  visited: boolean;\n  state: NodeStates;\n  connections: Connection[];\n  pos: Position;\n  group?: {\n    id: string;\n    color: Color;\n  };\n}\n\nexport const createGnode = (data: number | string, pos: Position): IGnode => {\n  return {\n    id: uuidv4(),\n    data,\n    state: 'default',\n    visited: false,\n    connections: [],\n    pos,\n  };\n};\n","import React from 'react';\n\nimport { NodeManager } from './components/pages/main/nodeManager';\n\nimport './App.scss';\n\nconst App: React.FC<{}> = () => {\n  return <NodeManager></NodeManager>;\n};\n\nexport default App;\n","import { Reducer } from 'redux';\nimport { IPath } from '../path/models';\n\nimport { INodeManager } from './models';\nimport {\n  ADD_NODE,\n  ADD_PATH,\n  NodeMangerAction,\n  SET_DESTINATION,\n  SET_ROOT,\n  UNVISIT_ALL,\n  UPDATE_NODE,\n  UPDATE_PATH,\n} from './models/nodeManagerActionTypes';\n\nconst defaultState: INodeManager = {\n  graph: {\n    nodes: {},\n    paths: {},\n  },\n};\n\nexport const NodeManagerReducer: Reducer<INodeManager, NodeMangerAction> = (\n  state = defaultState,\n  action: NodeMangerAction,\n): INodeManager => {\n  const newState: INodeManager = { ...state };\n  switch (action.type) {\n    // adds a new node to state\n    case ADD_NODE: {\n      const newNode = action.payload.gnode;\n      newState.graph.nodes = { ...newState.graph.nodes, [newNode.id]: newNode };\n      return newState;\n    }\n    // adds a new path to state\n    case ADD_PATH: {\n      const newPath = action.payload.path;\n      newState.graph.paths = { ...newState.graph.paths, [newPath.id]: newPath };\n      const sourceOldConnections = newState.graph.nodes[newPath.sourceId].connections;\n      newState.graph.nodes[newPath.sourceId].connections = [\n        ...sourceOldConnections,\n        { nodeID: newPath.destinationId, pathID: newPath.id },\n      ];\n      const destOldConnections = newState.graph.nodes[newPath.destinationId].connections;\n      newState.graph.nodes[newPath.destinationId].connections = [\n        ...destOldConnections,\n        { nodeID: newPath.sourceId, pathID: newPath.id },\n      ];\n      return newState;\n    }\n    // might regret this later\n    case UPDATE_NODE: {\n      const { updatedNode } = action.payload;\n      const previousNode = newState.graph.nodes[updatedNode.id];\n      if (!previousNode) {\n        return state;\n      }\n      // update the node\n      newState.graph.nodes[updatedNode.id] = { ...previousNode, ...updatedNode };\n      return newState;\n    }\n    case UPDATE_PATH: {\n      const { updatedPath } = action.payload;\n      const previousPath: IPath = newState.graph.paths[updatedPath.id];\n      if (!previousPath) {\n        return state;\n      }\n      // update the path\n      newState.graph.paths[updatedPath.id] = { ...previousPath, ...updatedPath };\n      return newState;\n    }\n    case SET_ROOT: {\n      const { nodeID } = action.payload;\n\n      newState.graph.rootID = nodeID;\n      return newState;\n    }\n    case UNVISIT_ALL: {\n      Object.keys(newState.graph.nodes).forEach((nodeID) => {\n        newState.graph.nodes[nodeID].visited = false;\n        newState.graph.nodes[nodeID].state = 'default';\n      });\n      Object.keys(newState.graph.paths).forEach((pathID) => {\n        newState.graph.paths[pathID].state = 'default';\n      });\n      return newState;\n    }\n    case SET_DESTINATION: {\n      const { nodeID } = action.payload;\n\n      newState.graph.destinationID = nodeID;\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, Store } from 'redux';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { NodeManagerReducer } from './nodeManager/nodeManagerReducer';\n\nconst rootReducer = combineReducers({ NodeManager: NodeManagerReducer });\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport const rootStore: Store = createStore(rootReducer, composeWithDevTools());\nexport type AppDispatch = typeof rootStore.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { rootStore } from './store';\n\nimport './index.scss';\nimport './reset.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={rootStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}