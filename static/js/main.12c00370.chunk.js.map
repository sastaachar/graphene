{"version":3,"sources":["reportWebVitals.ts","store/nodeManager/models/nodeManagerActionTypes.ts","components/main/gnode/gnode.tsx","components/main/path/path.tsx","components/main/nodeManager/nodeManager.tsx","store/nodeManager/nodeManagerActions.ts","store/path/models/path.ts","store/gnode/models/gnode.ts","App.tsx","store/nodeManager/nodeManagerReducer.ts","store/rootStore.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_NODE","ADD_PATH","Gnode","props","style","left","gnode","pos","x","top","y","backgroundColor","visited","className","onClick","onNodeSelect","data","Path","width","height","x1","path","sourcePos","y1","x2","destinationPos","y2","stroke","strokeWidth","mapDispatchToProps","addGnode","type","payload","addPath","connector","connect","state","nodeManager","NodeManager","useState","inputData","setInputData","panelState","setPanelState","boardRef","useRef","sourceNode","setSourceNode","updateNodeSelection","node","graph","nodes","id","connections","forEach","conn","nodeID","source","destination","newPath","uuidv4","sourceId","destinationId","value","onChange","e","target","nodeValue","parseInt","newGnode","pageX","current","offsetLeft","scrollLeft","pageY","offsetTop","scrollTop","ref","Object","values","map","paths","App","defaultState","rootReducer","combineReducers","action","newState","newNode","oldConnections","pathID","console","log","rootStore","createStore","composeWithDevTools","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.12c00370.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { IGnode } from '../../gnode/models';\nimport { IPath } from '../../path/models';\n\n// ACTION TYPES\nexport const ADD_NODE = 'ADD_NODE';\nexport const REMOVE_NODE = 'REMOVE_NODE';\n\nexport const ADD_PATH = 'ADD_PATH';\nexport const REMOVE_PATH = 'REMOVE_PATH';\n\nexport interface AddGnodeAction {\n  type: typeof ADD_NODE;\n  payload: { gnode: IGnode };\n}\n\nexport interface RemoveGnodeAction {\n  type: typeof REMOVE_NODE;\n  payload: { nodeID: string };\n}\n\nexport interface AddPathAction {\n  type: typeof ADD_PATH;\n  payload: { path: IPath };\n}\n\nexport interface RemovePathAction {\n  type: typeof REMOVE_PATH;\n  payload: { pathID: string };\n}\n\nexport type NodeMangerAction = AddGnodeAction | RemoveGnodeAction | AddPathAction | RemovePathAction;\n","import React, { CSSProperties } from 'react';\n\nimport { IGnode } from '../../../store/gnode/models';\n\nimport './gnode.scss';\n\ninterface Props {\n  gnode: IGnode;\n  onNodeSelect: (node: IGnode) => void;\n}\n\nexport const Gnode: React.FC<Props> = (props: Props) => {\n  const style: CSSProperties = {\n    left: props.gnode.pos.x,\n    top: props.gnode.pos.y,\n    backgroundColor: props.gnode.visited ? 'green' : 'red',\n  };\n\n  return (\n    <div className=\"gnode\" style={style} onClick={() => props.onNodeSelect(props.gnode)}>\n      <span className=\"gnode-content\">{props.gnode.data}</span>\n    </div>\n  );\n};\n","import React from 'react';\nimport { IPath } from '../../../store/path/models';\n\ninterface Props {\n  path: IPath;\n}\n\nexport const Path: React.FC<Props> = (props) => {\n  return (\n    <svg width=\"100%\" height=\"100%\">\n      <line\n        x1={props.path.sourcePos.x + 50}\n        y1={props.path.sourcePos.y + 50}\n        x2={props.path.destinationPos.x + 50}\n        y2={props.path.destinationPos.y + 50}\n        style={{ stroke: 'rgb(255,0,0)', strokeWidth: '2' }}\n      />\n    </svg>\n  );\n};\n","import React, { MouseEvent, useRef, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { createGnode, IGnode } from '../../../store/gnode/models';\nimport { addGnode, addPath } from '../../../store/nodeManager/nodeManagerActions';\nimport { createPath } from '../../../store/path/models';\nimport { AppState } from '../../../store/rootStore';\nimport { Gnode } from '../gnode';\nimport { Path } from '../path';\n\nimport './nodemanager.scss';\n\ninterface Props extends PropsFromRedux {}\n\nconst NodeManager: React.FC<Props> = (props: Props) => {\n  const [inputData, setInputData] = useState('');\n  const [panelState, setPanelState] = useState(0);\n  const boardRef = useRef<HTMLDivElement>(null);\n\n  const createNodeOnClick = (e: MouseEvent<HTMLDivElement>) => {\n    if (panelState != 0) return;\n    if (inputData) {\n      const nodeValue = parseInt(inputData);\n      if (!nodeValue) return;\n      const newGnode = createGnode(nodeValue, {\n        x: e.pageX - (boardRef.current?.offsetLeft ?? 0) - 50 + (boardRef.current?.scrollLeft ?? 0),\n        y: e.pageY - (boardRef.current?.offsetTop ?? 0) - 50 + (boardRef.current?.scrollTop ?? 0),\n      });\n      props.addGnode(newGnode);\n    }\n  };\n\n  const [sourceNode, setSourceNode] = useState<IGnode | null>(null);\n\n  const updateNodeSelection = (node: IGnode) => {\n    if (panelState != 1) return;\n    if (!sourceNode) {\n      setSourceNode(node);\n      return;\n    }\n    // source is set\n\n    // check if path already exists\n    const connections = props.nodeManager.graph.nodes[sourceNode.id].connections;\n    connections.forEach((conn) => {\n      if (conn.nodeID === node.id) {\n        // path already exists\n        setSourceNode(null);\n        return;\n      }\n    });\n\n    // const newPath = createPath();\n    // updateGnode  -> connections updated\n    // updateGraph  -> adding path to paths\n    const newPath = createPath(sourceNode, node);\n    props.addPath(newPath);\n    setSourceNode(null);\n  };\n\n  // 0 -> create node\n  // 1 -> create path\n\n  return (\n    <div className=\"nodemanager\">\n      <div className=\"panel\">\n        <input type=\"text\" value={inputData} onChange={(e) => setInputData(e.target.value)} />\n        <button onClick={() => setPanelState(0)}>create node</button>\n        <button onClick={() => setPanelState(1)}>create path</button>\n      </div>\n      <div className=\"board\" onClick={createNodeOnClick} ref={boardRef}>\n        {Object.values(props.nodeManager.graph.nodes).map((node) => (\n          <Gnode key={node.id} gnode={node} onNodeSelect={updateNodeSelection} />\n        ))}\n        {Object.values(props.nodeManager.graph.paths).map((path) => (\n          <Path key={path.id} path={path} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  nodeManager: state.NodeManager,\n});\nconst mapDispatchToProps = {\n  addGnode: addGnode,\n  addPath: addPath,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(NodeManager);\n","// action creator\n\nimport { IGnode } from '../gnode/models';\nimport { IPath } from '../path/models';\nimport { AddGnodeAction, ADD_NODE, AddPathAction, ADD_PATH } from './models/nodeManagerActionTypes';\n\nexport const addGnode = (gnode: IGnode): AddGnodeAction => ({\n  type: ADD_NODE,\n  payload: { gnode },\n});\n\nexport const addPath = (path: IPath): AddPathAction => ({\n  type: ADD_PATH,\n  payload: { path },\n});\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { Position } from '../../sharedModels';\n\nexport interface IPath {\n  id: string;\n  sourceId: string;\n  destinationId: string;\n  sourcePos: Position;\n  destinationPos: Position;\n}\n\nexport const createPath = (\n  source: { id: string; pos: Position },\n  destination: { id: string; pos: Position },\n): IPath => {\n  return {\n    id: uuidv4(),\n    sourceId: source.id,\n    destinationId: destination.id,\n    sourcePos: source.pos,\n    destinationPos: destination.pos,\n  };\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { Position } from '../../sharedModels';\n\nexport interface Connection {\n  nodeID: string;\n  pathID: string;\n}\nexport interface IGnode {\n  id: string;\n  data: number;\n  visited: boolean;\n  connections: Connection[];\n  pos: Position;\n}\n\nexport const createGnode = (data: number, pos: Position): IGnode => {\n  return {\n    id: uuidv4(),\n    data,\n    visited: false,\n    connections: [],\n    pos,\n  };\n};\n","import React from 'react';\n\nimport { NodeManager } from './components/main/nodeManager';\n\nimport './App.scss';\n\nconst App: React.FC<{}> = () => {\n  return <NodeManager></NodeManager>;\n};\n\nexport default App;\n","import { Reducer } from 'redux';\n\nimport { INodeManager } from './models';\nimport { ADD_NODE, ADD_PATH, NodeMangerAction } from './models/nodeManagerActionTypes';\n\nconst defaultState: INodeManager = {\n  graph: {\n    nodes: {},\n    paths: {},\n  },\n};\n\nexport const NodeManagerReducer: Reducer<INodeManager, NodeMangerAction> = (\n  state = defaultState,\n  action: NodeMangerAction,\n): INodeManager => {\n  const newState: INodeManager = { ...state };\n  switch (action.type) {\n    // adds a new node to state\n    case ADD_NODE:\n      const newNode = action.payload.gnode;\n      newState.graph.nodes = { ...newState.graph.nodes, [newNode.id]: newNode };\n      return newState;\n\n    // adds a new path to state\n    case ADD_PATH:\n      const newPath = action.payload.path;\n      newState.graph.paths = { ...newState.graph.paths, [newPath.id]: newPath };\n      const oldConnections = newState.graph.nodes[newPath.sourceId].connections;\n      newState.graph.nodes[newPath.sourceId].connections = [\n        ...oldConnections,\n        { nodeID: newPath.destinationId, pathID: newPath.id },\n      ];\n      newState.graph.nodes[newPath.sourceId].visited = true;\n      newState.graph.nodes[newPath.destinationId].visited = true;\n      console.log(newState);\n      return newState;\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, Store } from 'redux';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { NodeManagerReducer } from './nodeManager/nodeManagerReducer';\n\nconst rootReducer = combineReducers({ NodeManager: NodeManagerReducer });\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport const rootStore: Store = createStore(rootReducer, composeWithDevTools());\nexport type AppDispatch = typeof rootStore.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { rootStore } from './store';\n\nimport './index.scss';\nimport './reset.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={rootStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}