{"version":3,"sources":["dataStructures/queue.ts","dataStructures/stack.ts","dataStructures/priorityQueue.ts","store/nodeManager/algorithms/bfs.ts","store/nodeManager/algorithms/dfs.ts","store/nodeManager/algorithms/dijkstra.ts","store/nodeManager/algorithms/bellmanford.ts","store/nodeManager/algorithms/graphGrouping.ts","store/nodeManager/models/nodeManagerActionTypes.ts","store/nodeManager/nodeManagerActions.ts","components/shared/checkbox/checkbox.tsx","components/shared/select-search/selectSearch.tsx","components/pages/main/gnode/gnode.tsx","components/pages/main/path/path.tsx","components/pages/main/nodeManager/graphColors.ts","components/pages/main/nodeManager/nodeManager.tsx","store/path/models/path.ts","store/gnode/models/gnode.ts","App.tsx","store/nodeManager/nodeManagerReducer.ts","store/rootStore.ts","index.tsx"],"names":["Queue","queue","this","length","shift","element","push","Stack","stack","unshift","Lesser","a","b","PriorityQueue","compare","pQueue","ele","left","right","midPos","Math","floor","pos","getPos","splice","bfs","graph","updateNode","rootID","console","log","q","visited","delay","curId","pop","cur","nodes","id","setTimeout","connections","forEach","conn","curNode","nodeID","state","empty","dfs","s","dijkstra","updatePath","costs","cost","pred","pathID","parentID","Object","values","node","Infinity","data","destinationID","pathCost","paths","weight","prev","connPath","i","pathId","keys","bellmanford","k","N","M","j","path","destinationId","sourceId","groupGraph","groupColors","soloColor","groupId","group","color","groupColor","ADD_NODE","UPDATE_NODE","ADD_PATH","SET_ROOT","UNVISIT_ALL","UPDATE_PATH","SET_DESTINATION","updatedNode","type","payload","Checkbox","props","classNameInput","isChecked","className","onClick","SearchIcon","width","height","viewBox","fill","xmlns","d","SelectSearch","ref","cb","useState","searchText","setsearchText","showBar","setShowBar","inputBar","createRef","searchBar","useEffect","handleOutsideClick","event","current","contains","target","document","addEventListener","removeEventListener","focus","selectedvalue","options","filter","x","key","keyState","value","defaultSlectText","onChange","e","toLocaleLowerCase","includes","map","option","Gnode","isSelected","gnode","isTouched","classNameOutside","classNameInside","isRoot","isDestination","style","top","y","innerStyle","backgroundColor","mapDispatchToProps","connector","connect","React","memo","NodeManager","pathColor","stroke","sourcePos","destinationPos","convertPoint","endPoint","x1","y1","x2","y2","C","c","sqrt","ans1","ans2","abs","getEndPoint","midX","midY","bezier","textPos","pathType","bPoint","m","tan30","tan150","m1","m2","c1","c2","getIntersection","getBezierPoint","markerWidth","markerHeight","refX","refY","orient","points","markerEnd","position","fontSize","graphColors","addGnode","addPath","setRoot","unvisitAll","updatedPath","setDestination","nodeManager","inputData","setInputData","boardRef","useRef","modeState","setModeState","algorithmState","setAlgorithmState","sourceNode","setSourceNode","clickedNode","setClickedNode","autoIncrement","setAutoIncrement","handleNodeClickChange","handleNodeClick","useCallback","createPathOnClick","destinationNode","destConnections","newPath","parseInt","uuidv4","undefined","selectedNode","unselectSourceNode","htmlFor","intValue","newGnode","pageX","offsetLeft","scrollLeft","pageY","offsetTop","scrollTop","_state","App","defaultState","rootReducer","combineReducers","action","newState","newNode","sourceOldConnections","previousNode","previousPath","rootStore","createStore","composeWithDevTools","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.d432b47b.chunk.js","sourcesContent":["export default class Queue<T> {\n  private queue: T[];\n\n  constructor() {\n    this.queue = [];\n  }\n\n  front(): T | undefined {\n    if (this.queue.length === 0) return undefined;\n    return this.queue[0];\n  }\n\n  pop(): T | undefined {\n    // remove from front\n    return this.queue.shift();\n  }\n\n  push(element: T) {\n    // add at rear\n    this.queue.push(element);\n  }\n\n  empty(): boolean {\n    return this.queue.length === 0;\n  }\n}\n","export default class Stack<T> {\n  private stack: T[];\n\n  constructor() {\n    this.stack = [];\n  }\n\n  top(): T | undefined {\n    if (this.stack.length === 0) return undefined;\n    return this.stack[0];\n  }\n\n  pop(): T | undefined {\n    // remove from front\n    return this.stack.shift();\n  }\n\n  push(element: T) {\n    // add at front\n    this.stack.unshift(element);\n  }\n\n  empty(): boolean {\n    return this.stack.length === 0;\n  }\n}\n","export function Lesser<T>(a: T, b: T): boolean {\n  return a <= b;\n}\nexport function Greater<T>(a: T, b: T): boolean {\n  return a >= b;\n}\n\nexport type Comparator<T> = (a: T, b: T) => boolean;\n\nexport default class PriorityQueue<T> {\n  private pQueue: T[];\n  private compare: Comparator<T>;\n\n  private getPos(ele: T, left: number, right: number): number {\n    while (left <= right) {\n      if (left === right) {\n        return this.compare(ele, this.pQueue[left]) ? left : left + 1;\n      }\n      const midPos = Math.floor((left + right) / 2);\n\n      if (this.compare(ele, this.pQueue[midPos])) {\n        right = midPos - 1;\n      } else {\n        left = midPos + 1;\n      }\n    }\n\n    return 0;\n  }\n\n  constructor(compare: Comparator<T> = Lesser) {\n    this.pQueue = [];\n    this.compare = compare;\n  }\n\n  front(): T | undefined {\n    if (this.pQueue.length === 0) return undefined;\n    return this.pQueue[0];\n  }\n\n  pop(): T | undefined {\n    // remove from front\n    return this.pQueue.shift();\n  }\n\n  push(element: T) {\n    const pos = this.getPos(element, 0, this.pQueue.length - 1);\n    this.pQueue.splice(pos, 0, element);\n  }\n\n  empty(): boolean {\n    return this.pQueue.length === 0;\n  }\n}\n","import { Queue } from '../../../dataStructures';\nimport { IGnode } from '../../gnode/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction } from '../models/nodeManagerActionTypes';\nimport { Visited } from './helpers';\n\nconst bfs = (graph: IGraph, updateNode: (x: IGnode) => UpdateNodeAction) => {\n  if (!graph.rootID) {\n    console.log('Root is not set');\n    return;\n  }\n\n  console.log('Starting BFS');\n\n  const q = new Queue<string>();\n  q.push(graph.rootID);\n\n  const visited: Visited = {};\n\n  let delay: number = 0;\n\n  while (!q.empty()) {\n    const curId = q.pop() as string;\n    console.log(curId);\n    const cur = graph.nodes[curId];\n    visited[cur.id] = true;\n\n    setTimeout(() => {\n      updateNode({ ...cur, visited: true });\n    }, delay);\n\n    delay += 300;\n\n    graph.nodes[cur.id].connections.forEach((conn) => {\n      const curNode = graph.nodes[conn.nodeID];\n      if (!visited[conn.nodeID]) {\n        q.push(conn.nodeID);\n        setTimeout(() => {\n          updateNode({ ...curNode, state: 'touched' });\n        }, delay);\n      }\n    });\n  }\n\n  console.log('BFS finished');\n};\n\nexport default bfs;\n","import { Stack } from '../../../dataStructures';\nimport { IGnode } from '../../gnode/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction } from '../models/nodeManagerActionTypes';\nimport { Visited } from './helpers';\n\nconst dfs = (graph: IGraph, updateNode: (x: IGnode) => UpdateNodeAction) => {\n  if (!graph.rootID) {\n    console.log('Root is not set');\n    return;\n  }\n\n  console.log('Starting DFS');\n\n  const s = new Stack<string>();\n  s.push(graph.rootID);\n\n  const visited: Visited = {};\n\n  let delay: number = 0;\n\n  while (!s.empty()) {\n    const curId = s.pop() as string;\n    console.log(curId);\n    const cur = graph.nodes[curId];\n    visited[cur.id] = true;\n\n    setTimeout(() => {\n      updateNode({ ...cur, visited: true });\n    }, delay);\n\n    delay += 300;\n\n    graph.nodes[cur.id].connections.forEach((conn) => {\n      const curNode = graph.nodes[conn.nodeID];\n      if (!visited[conn.nodeID]) {\n        s.push(conn.nodeID);\n        setTimeout(() => {\n          updateNode({ ...curNode, state: 'touched' });\n        }, delay);\n      }\n    });\n  }\n\n  console.log('DFS finished');\n};\n\nexport default dfs;\n","import { PriorityQueue } from '../../../dataStructures';\nimport { IGnode } from '../../gnode/models';\nimport { IPath } from '../../path/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction, UpdatePathAction } from '../models/nodeManagerActionTypes';\nimport { Costs, PathCost, Predecessor, PrevState, Visited } from './helpers';\n\n// there should be no negative weights\n\nconst dijkstra = (\n  graph: IGraph,\n  updateNode: (x: IGnode) => UpdateNodeAction,\n  updatePath: (x: IPath) => UpdatePathAction,\n) => {\n  if (!graph.rootID) {\n    console.log('Root is not set');\n    return;\n  }\n\n  console.log('Starting Dijkstra');\n\n  const compare = (a: PathCost, b: PathCost): boolean => {\n    return a.cost <= b.cost;\n  };\n\n  const costs: Costs = {};\n  const visited: Visited = {};\n  const q = new PriorityQueue<PathCost>(compare);\n\n  const pred: Predecessor = {};\n\n  pred[graph.rootID] = { pathID: null, parentID: null };\n\n  Object.values(graph.nodes).forEach((node) => {\n    costs[node.id] = Infinity;\n  });\n\n  costs[graph.rootID] = 0;\n  q.push({ cost: 0, nodeID: graph.rootID });\n\n  let delay: number = 0;\n\n  while (!q.empty()) {\n    const cur = q.pop() as PathCost;\n\n    console.log(graph.nodes[cur.nodeID].data);\n    const curNode = graph.nodes[cur.nodeID];\n    visited[cur.nodeID] = true;\n\n    setTimeout(() => {\n      updateNode({ ...curNode, visited: true });\n    }, delay);\n\n    delay += 300;\n\n    // if destination is set - break preemptively\n    if (graph.destinationID === cur.nodeID) break;\n\n    graph.nodes[cur.nodeID].connections.forEach((conn) => {\n      const pathCost = graph.paths[conn.pathID].weight ?? 0;\n      if (!visited[conn.nodeID] && costs[conn.nodeID] > cur.cost + pathCost) {\n        costs[conn.nodeID] = cur.cost + pathCost;\n        q.push({ cost: costs[conn.nodeID], nodeID: conn.nodeID });\n        setTimeout(() => {\n          updateNode({ ...curNode, state: 'touched' });\n        }, delay);\n        pred[conn.nodeID] = { parentID: cur.nodeID, pathID: conn.pathID };\n      }\n    });\n  }\n\n  if (graph.destinationID) {\n    // destination id is set so we can find path\n\n    // check if no path exists\n\n    let prev: string | null = graph.destinationID;\n\n    const paths: string[] = [];\n\n    while (prev) {\n      // update path\n\n      const connPath: PrevState = pred[prev];\n\n      if (!connPath) {\n        // prev was never visted\n        console.log(\"Can't reach \", prev);\n        break;\n      }\n      if (connPath.pathID) paths.push(connPath.pathID);\n\n      prev = connPath.parentID;\n    }\n\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const pathId = paths[i];\n      setTimeout(() => {\n        updatePath({ ...graph.paths[pathId], state: 'travel' });\n      }, delay);\n      delay += 300;\n    }\n  }\n\n  Object.keys(costs).forEach((id) => {\n    console.log(graph.nodes[id].data, costs[id]);\n  });\n\n  console.log('Dijkstra finished');\n};\n\nexport default dijkstra;\n","// perform bellman ford\n// break if no changes occur\n// if it goes on for n-1\n//   perform more time to check for negative weighted loop\n// mark negative weighted loop as warn\n\nimport { IPath } from '../../path/models';\nimport { IGraph } from '../models';\nimport { UpdatePathAction } from '../models/nodeManagerActionTypes';\nimport { Costs, Predecessor, PrevState } from './helpers';\n\nconst bellmanford = (graph: IGraph, updatePath: (x: IPath) => UpdatePathAction) => {\n  if (!graph.rootID) {\n    console.log('Root is not set');\n    return;\n  }\n\n  console.log('Starting Bellmanford');\n\n  const costs: Costs = {};\n  const pred: Predecessor = {};\n  let delay: number = 0;\n\n  const paths: string[] = [];\n  // add all the pathids\n  Object.keys(graph.paths).forEach((k) => paths.push(k));\n  Object.keys(graph.nodes).forEach((k) => (costs[k] = Infinity));\n  costs[graph.rootID] = 0;\n\n  const N: number = Object.keys(graph.nodes).length;\n  const M: number = paths.length;\n\n  for (let i = 0; i < N - 1; i++) {\n    for (let j = 0; j < M; j++) {\n      const path = graph.paths[paths[j]];\n\n      setTimeout(() => {\n        updatePath({ ...graph.paths[path.id], state: 'touched' });\n      }, delay);\n      delay += 200;\n\n      if (costs[path.destinationId] > costs[path.sourceId] + (path.weight ?? 0)) {\n        // visit node and update pred\n        costs[path.destinationId] = costs[path.sourceId] + (path.weight ?? 0);\n        pred[path.destinationId] = { parentID: path.sourceId, pathID: path.id };\n      }\n\n      setTimeout(() => {\n        updatePath({ ...graph.paths[path.id], state: 'default' });\n      }, delay);\n      delay += 200;\n    }\n  }\n\n  if (graph.destinationID) {\n    // destination id is set so we can find path\n\n    // check if no path exists\n\n    let prev: string | null = graph.destinationID;\n\n    while (prev) {\n      // update path\n\n      const connPath: PrevState = pred[prev];\n\n      if (!connPath) {\n        // prev was never visted\n        console.log(\"Can't reach \", prev);\n        break;\n      }\n      setTimeout(() => {\n        if (connPath.pathID) updatePath({ ...graph.paths[connPath.pathID], state: 'travel' });\n      }, delay);\n\n      delay += 300;\n      prev = connPath.parentID;\n    }\n  }\n  console.log('hello', costs);\n\n  Object.keys(costs).forEach((id) => {\n    console.log(graph.nodes[id].data, costs[id]);\n  });\n\n  console.log('Bellmanford finished');\n};\n\nexport default bellmanford;\n","// we will color the diffrentt island in graph\n// perform bfs on the graph for grouping\n\nimport { Queue } from '../../../dataStructures';\nimport { IGnode } from '../../gnode/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction } from '../models/nodeManagerActionTypes';\nimport { Visited } from './helpers';\n\nimport { Color } from '../../sharedModels';\n\nconst groupGraph = (\n  graph: IGraph,\n  groupColors: Color[],\n  soloColor: Color,\n  updateNode: (x: IGnode) => UpdateNodeAction,\n) => {\n  console.log('Starting Grouping');\n\n  const visited: Visited = {};\n  let delay: number = 0;\n  let groupId = -1;\n\n  // TODO : change alpha values once color list is exhausted\n\n  Object.values(graph.nodes).forEach((node) => {\n    if (visited[node.id]) return;\n\n    if (node.connections.length === 0) {\n      // lonely node\n      setTimeout(() => {\n        updateNode({ ...node, state: 'grouped', group: { id: '' + -1, color: soloColor } });\n      }, delay);\n      delay += 150;\n      return;\n    }\n\n    ++groupId;\n    const groupColor = groupColors[groupId % groupColors.length];\n\n    const q = new Queue<string>();\n    q.push(node.id);\n\n    while (!q.empty()) {\n      const curId = q.pop() as string;\n      console.log(curId);\n      const cur = graph.nodes[curId];\n      visited[cur.id] = true;\n\n      setTimeout(() => {\n        updateNode({ ...cur, state: 'grouped', group: { id: '' + groupId, color: groupColor } });\n      }, delay);\n\n      delay += 150;\n\n      graph.nodes[cur.id].connections.forEach((conn) => {\n        const curNode = graph.nodes[conn.nodeID];\n        if (!visited[conn.nodeID]) {\n          q.push(conn.nodeID);\n          setTimeout(() => {\n            updateNode({ ...curNode, state: 'touched' });\n          }, delay);\n        }\n      });\n    }\n  });\n\n  console.log('Grouping finished');\n};\n\nexport default groupGraph;\n","import { IGnode } from '../../gnode/models';\nimport { IPath } from '../../path/models';\n\n// ACTION TYPES\nexport const ADD_NODE = 'ADD_NODE';\nexport interface AddGnodeAction {\n  type: typeof ADD_NODE;\n  payload: { gnode: IGnode };\n}\nexport const REMOVE_NODE = 'REMOVE_NODE';\nexport interface RemoveGnodeAction {\n  type: typeof REMOVE_NODE;\n  payload: { nodeID: string };\n}\nexport const UPDATE_NODE = 'UPDATE_NODE';\n\nexport interface UpdateNodeAction {\n  type: typeof UPDATE_NODE;\n  payload: { updatedNode: IGnode };\n}\n\nexport const ADD_PATH = 'ADD_PATH';\n\nexport interface AddPathAction {\n  type: typeof ADD_PATH;\n  payload: { path: IPath };\n}\nexport const REMOVE_PATH = 'REMOVE_PATH';\nexport interface RemovePathAction {\n  type: typeof REMOVE_PATH;\n  payload: { pathID: string };\n}\n\nexport const SET_ROOT = 'SET_ROOT';\nexport interface SetRootAction {\n  type: typeof SET_ROOT;\n  payload: { nodeID: string | undefined };\n}\n\nexport const UNVISIT_ALL = 'UNVISIT_ALL';\nexport interface UnvisitAllAction {\n  type: typeof UNVISIT_ALL;\n}\n\nexport const UPDATE_PATH = 'UPDATE_PATH';\n\nexport interface UpdatePathAction {\n  type: typeof UPDATE_PATH;\n  payload: { updatedPath: IPath };\n}\n\nexport const SET_DESTINATION = 'SET_DESTINATION';\n\nexport interface SetDestinationAction {\n  type: typeof SET_DESTINATION;\n  payload: { nodeID: string | undefined };\n}\n\nexport type NodeMangerAction =\n  | AddGnodeAction\n  | RemoveGnodeAction\n  | AddPathAction\n  | RemovePathAction\n  | UpdateNodeAction\n  | SetRootAction\n  | UnvisitAllAction\n  | UpdatePathAction\n  | SetDestinationAction;\n","// action creator\n\nimport { IGnode } from '../gnode/models';\nimport { IPath } from '../path/models';\nimport {\n  AddGnodeAction,\n  ADD_NODE,\n  AddPathAction,\n  ADD_PATH,\n  UpdateNodeAction,\n  UPDATE_NODE,\n  SetRootAction,\n  SET_ROOT,\n  UnvisitAllAction,\n  UNVISIT_ALL,\n  UpdatePathAction,\n  UPDATE_PATH,\n  SetDestinationAction,\n  SET_DESTINATION,\n} from './models/nodeManagerActionTypes';\n\nexport const addGnode = (gnode: IGnode): AddGnodeAction => ({\n  type: ADD_NODE,\n  payload: { gnode },\n});\n\nexport const addPath = (path: IPath): AddPathAction => ({\n  type: ADD_PATH,\n  payload: { path },\n});\n\nexport const updateNode = (updatedNode: IGnode): UpdateNodeAction => ({\n  type: UPDATE_NODE,\n  payload: { updatedNode },\n});\n\nexport const setRoot = (nodeID: string | undefined): SetRootAction => ({\n  type: SET_ROOT,\n  payload: { nodeID },\n});\n\nexport const unvisitAll = (): UnvisitAllAction => ({\n  type: UNVISIT_ALL,\n});\n\nexport const updatePath = (updatedPath: IPath): UpdatePathAction => ({\n  type: UPDATE_PATH,\n  payload: { updatedPath },\n});\n\nexport const setDestination = (nodeID: string | undefined): SetDestinationAction => ({\n  type: SET_DESTINATION,\n  payload: { nodeID },\n});\n","import React, { MouseEventHandler } from 'react';\nimport './checkbox.scss';\n\ninterface CheckboxProps {\n  isChecked: boolean;\n  onClick: MouseEventHandler<HTMLDivElement>;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = (props: CheckboxProps) => {\n  let classNameInput = 'checkbox-input';\n  if (props.isChecked) classNameInput += ' checkbox-on';\n  return <div className={classNameInput} onClick={props.onClick}></div>;\n};\n\nexport default Checkbox;\n","import React, { createRef, RefObject, useEffect, useState } from 'react';\n\nimport './selectSearch.scss';\n\ninterface Option {\n  key: string | number;\n  value: string;\n}\n\ninterface SelectSearchProps {\n  defaultSlectText: string;\n  keyState: string | number;\n  options: Option[];\n  onChange: (key: string | number) => void;\n}\n\nconst SearchIcon = () => {\n  return (\n    <svg width=\"17\" height=\"17\" viewBox=\"0 0 17 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M16.7688 14.6976L13.4582 11.3876C13.3088 11.2382 13.1062 11.1552 12.8937 11.1552H12.3525C13.2689 9.9832 13.8135 8.50913 13.8135 6.90558C13.8135 3.09091 10.7221 0 6.90676 0C3.09144 0 0 3.09091 0 6.90558C0 10.7202 3.09144 13.8112 6.90676 13.8112C8.51058 13.8112 9.98491 13.2667 11.1571 12.3504V12.8915C11.1571 13.104 11.2401 13.3065 11.3895 13.4559L14.7001 16.7659C15.0122 17.078 15.517 17.078 15.8258 16.7659L16.7655 15.8264C17.0776 15.5143 17.0776 15.0097 16.7688 14.6976ZM6.90676 11.1552C4.55912 11.1552 2.65644 9.25613 2.65644 6.90558C2.65644 4.55834 4.5558 2.65599 6.90676 2.65599C9.25439 2.65599 11.1571 4.55502 11.1571 6.90558C11.1571 9.25281 9.25771 11.1552 6.90676 11.1552Z\"\n        fill=\"#26408B\"\n      />\n    </svg>\n  );\n};\n\nconst SelectSearch: React.FC<SelectSearchProps> = (props: SelectSearchProps) => {\n  const [searchText, setsearchText] = useState('');\n  const [showBar, setShowBar] = useState<boolean>(false);\n  // to auto focus\n  const inputBar = createRef<HTMLInputElement>();\n\n  // needed for handling outside click\n  const searchBar = createRef<HTMLDivElement>();\n  // to close menu if clicked outside\n  const handleOutsideClick = () => {\n    if (showBar) setShowBar(false);\n  };\n  useOutsideClick(searchBar, handleOutsideClick);\n\n  // auto focus on input\n  useEffect(() => {\n    if (showBar) inputBar.current?.focus();\n  }, [showBar]);\n\n  // used for search filter\n  const searchFilter = (ele: Option) => {\n    if (ele.value.toLocaleLowerCase().includes(searchText.toLocaleLowerCase())) return ele;\n  };\n\n  // toggle the menu bar\n  const handleToggleShow = () => {\n    setShowBar(!showBar);\n  };\n\n  // selected value is from parent if it fails use default\n  const selectedvalue = props.options.filter((x) => x.key === props.keyState)[0]?.value ?? props.defaultSlectText;\n\n  return (\n    <div className={'select-search'} ref={searchBar} onClick={handleToggleShow}>\n      <div className={'select-search-selected' + (showBar ? ' two-rounded' : ' all-rounded')}>\n        <div className=\"select-search-selected-value\">\n          <span>{selectedvalue}</span>\n        </div>\n        <div className={'select-search-selected-button' + (showBar ? ' down-arrow' : ' left-arrow')}></div>\n      </div>\n      {showBar && (\n        <div className=\"select-search-bar\">\n          <div className=\"input-box\">\n            <span>\n              <SearchIcon />\n            </span>\n            <input type=\"text\" onChange={(e) => setsearchText(e.target.value)} ref={inputBar} value={searchText} />\n          </div>\n          {props.options.filter(searchFilter).map((option) => (\n            <div key={option.key} className=\"select-search-option\" onClick={() => props.onChange(option.key)}>\n              <span>{option.value}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n//! arrow function gives error and i dont want to use the work around\n//\n/**\n * Detects clicks outside ref and calls cb\n *\n * @param ref  Clicks outside ref is detected\n * @param cb   If click is detected cb is called\n */\nfunction useOutsideClick(ref: RefObject<any>, cb: any): void {\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      if (ref.current?.contains && !ref.current.contains(event.target)) {\n        cb();\n      }\n    };\n\n    // bind the listner\n    document.addEventListener('mousedown', handleOutsideClick);\n    return () => {\n      // remove the listner\n      document.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, [ref]);\n}\n\nexport default SelectSearch;\n","import React, { CSSProperties } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { IGnode } from '../../../../store/gnode/models';\n\nimport { updateNode } from '../../../../store/nodeManager/nodeManagerActions';\n\nimport './gnode.scss';\n\ninterface Props extends PropsFromRedux {\n  gnode: IGnode;\n  isRoot?: boolean;\n  isDestination?: boolean;\n  onClick: (node: IGnode) => void;\n  _state?: string;\n}\n\nconst Gnode: React.FC<Props> = (props: Props) => {\n  const isSelected = props.gnode.state === 'selected',\n    isTouched = props.gnode.state === 'touched';\n  let classNameOutside = 'gnode';\n  classNameOutside += isSelected\n    ? ' gnode--selected'\n    : props.gnode.visited\n    ? ' gnode--visited'\n    : isTouched\n    ? ' gnode--touched'\n    : '';\n\n  let classNameInside = 'gnode-inner';\n  classNameInside += props.isRoot ? ' gnode--root' : props.isDestination ? ' gnode--destination' : '';\n\n  const style: CSSProperties = {\n    left: props.gnode.pos.x - 50,\n    top: props.gnode.pos.y - 50,\n  };\n\n  const handleOnClick = () => {\n    props.onClick(props.gnode);\n  };\n\n  const innerStyle: CSSProperties = {};\n  if (props.gnode.state === 'grouped') {\n    const color = props.gnode.group?.color ?? [0, 0, 0, 0];\n    innerStyle.backgroundColor = `rgba(${color[0]},${color[1]},${color[2]},${color[3]})`;\n  }\n\n  return (\n    <div className={classNameOutside} style={style} onClick={handleOnClick}>\n      <div className={classNameInside} style={innerStyle}>\n        <span className=\"gnode-inner-content\">{props.gnode.data}</span>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = () => ({});\nconst mapDispatchToProps = {\n  updateNode,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(React.memo(Gnode));\n","import React, { CSSProperties } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { IPath } from '../../../../store/path/models';\nimport { AppState } from '../../../../store/rootStore';\nimport { Position } from '../../../../store/sharedModels';\n\nimport './path.scss';\n\ninterface Props extends PropsFromRedux {\n  path: IPath;\n  _state?: string;\n}\n\nconst Path: React.FC<Props> = (props) => {\n  const pathColor =\n    props.path.state === 'travel'\n      ? 'var(--green)'\n      : props.path.state === 'touched'\n      ? 'var(--yello)'\n      : 'var(--primary-darker)';\n  const style: CSSProperties = { stroke: pathColor };\n\n  const sourcePos = props.nodes[props.path.sourceId].pos,\n    destinationPos = props.nodes[props.path.destinationId].pos;\n\n  const getIntersection = (m1: number, c1: number, m2: number, c2: number) => {\n    const x = (c2 - c1) / (m1 - m2),\n      y = m1 * x + c1;\n    return { x, y };\n  };\n  const getBezierPoint = (x1: number, y1: number, x2: number, y2: number): Position => {\n    const m = (y2 - y1) / (x2 - x1);\n\n    const tan30 = 0.57735;\n    const tan150 = -1 * tan30;\n\n    const m1 = (m - tan30) / (1 + tan30 * m),\n      c1 = y1 - m1 * x1;\n\n    const m2 = (m - tan150) / (1 + tan150 * m),\n      c2 = y2 - m2 * x2;\n\n    return getIntersection(m1, c1, m2, c2);\n  };\n\n  const getEndPoint = (x1: number, y1: number, x2: number, y2: number): Position => {\n    const M = (y2 - y1) / (x2 - x1),\n      C = y1 - M * x1;\n\n    const a = 1 + M * M,\n      b = 2 * (M * C - x2 - y2 * M),\n      c = x2 * x2 + y2 * y2 + C * C - 2 * y2 * C - 2500,\n      d = Math.sqrt(b * b - 4 * a * c);\n\n    const ans1: Position = { x: 0, y: 0 };\n    ans1.x = (-b + d) / (2 * a);\n    ans1.y = ans1.x * M + C;\n\n    const ans2: Position = { x: 0, y: 0 };\n    ans2.x = (-b - d) / (2 * a);\n    ans2.y = ans2.x * M + C;\n\n    return Math.abs(ans1.x - x1) + Math.abs(ans1.y - y1) > Math.abs(ans2.x - x1) + Math.abs(ans2.y - y1) ? ans2 : ans1;\n  };\n\n  const convertPoint = (pos: Position): Position => {\n    return {\n      x: pos.x,\n      y: -1 * pos.y,\n    };\n  };\n\n  const endPoint = convertPoint(getEndPoint(sourcePos.x, -1 * sourcePos.y, destinationPos.x, -1 * destinationPos.y));\n  // will refactor later\n  const midX = (sourcePos.x + endPoint.x) / 2,\n    midY = (sourcePos.y + endPoint.y) / 2;\n\n  let bezier: string = '',\n    textPos: Position = { x: 0, y: 0 };\n  const pathType = props.path.type;\n\n  if (pathType === 'line') {\n    bezier = `M ${sourcePos.x} ${sourcePos.y} L ${endPoint.x} ${endPoint.y}`;\n    textPos = { x: midX, y: midY };\n  } else if (pathType === 'curve') {\n    const bPoint = convertPoint(getBezierPoint(sourcePos.x, -1 * sourcePos.y, endPoint.x, -1 * endPoint.y));\n    bezier = `M ${sourcePos.x} ${sourcePos.y} Q ${bPoint.x} ${bPoint.y} ${endPoint.x} ${endPoint.y}`;\n    textPos = { x: (bPoint.x + midX) / 2, y: (bPoint.y + midY) / 2 };\n  } else if (pathType === 'self') {\n    // xq = destinationPos.x - 80;\n    // yq = destinationPos.y - 80;\n  } else {\n    console.log('invalid type');\n  }\n\n  console.log('path');\n\n  return (\n    <div className=\"path-wrapper\">\n      <svg className=\"path\" width=\"100%\" height=\"100%\">\n        <defs>\n          <marker\n            id={`${props.path.id}-arrowhead`}\n            markerWidth=\"10\"\n            markerHeight=\"7\"\n            refX=\"9.5\"\n            refY=\"3.5\"\n            orient=\"auto\"\n          >\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill={pathColor} />\n          </marker>\n        </defs>\n        <path\n          id={props.path.id}\n          d={bezier}\n          style={style}\n          fill=\"none\"\n          markerEnd={`url(#${props.path.id}-arrowhead)`}\n        ></path>\n      </svg>\n\n      <span\n        style={{\n          position: 'absolute',\n          left: textPos.x,\n          top: textPos.y,\n          color: 'var(--yellow)',\n          fontSize: '20px',\n        }}\n      >\n        {props.path.weight}\n      </span>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  nodes: state.NodeManager.graph.nodes,\n});\nconst mapDispatchToProps = {};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Path);\n","import { Color } from '../../../../store/sharedModels';\n\nexport const graphColors: Color[] = [\n  [64, 249, 155, 1],\n  [249, 248, 113, 1],\n  [15, 8, 75, 1],\n  [136, 106, 190, 1],\n  [0, 219, 203, 1],\n  [175, 245, 136, 1],\n  [252, 126, 139, 1],\n  [0, 89, 166, 1],\n  [149, 74, 0, 1],\n  [241, 150, 46, 1],\n  [38, 64, 139, 1],\n  [8, 178, 227, 1],\n];\n","import React, { MouseEvent, useCallback, useEffect, useRef, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { createGnode, IGnode } from '../../../../store/gnode/models';\nimport { PathType } from '../../../../store/path/models';\nimport { bfs, dfs, dijkstra } from '../../../../store/nodeManager/algorithms';\nimport bellmanford from '../../../../store/nodeManager/algorithms/bellmanford';\nimport groupGraph from '../../../../store/nodeManager/algorithms/graphGrouping';\nimport {\n  addGnode,\n  addPath,\n  setDestination,\n  setRoot,\n  unvisitAll,\n  updateNode,\n  updatePath,\n} from '../../../../store/nodeManager/nodeManagerActions';\nimport { createPath } from '../../../../store/path/models';\nimport { AppState } from '../../../../store/rootStore';\nimport { Checkbox } from '../../../shared/checkbox';\nimport { SelectSearch } from '../../../shared/select-search';\nimport { Gnode } from '../gnode';\nimport { Path } from '../path';\nimport { graphColors } from './graphColors';\n\nimport './nodeManager.scss';\n\ninterface Props extends PropsFromRedux {}\n\n// ! Fix this\n// _state has been to added to node and path to prevent\n// re renders (performance optimizations using React.memo)\n\nconst NodeManager: React.FC<Props> = (props: Props) => {\n  // for node data input\n  const [inputData, setInputData] = useState('');\n\n  const boardRef = useRef<HTMLDivElement>(null);\n\n  const [modeState, setModeState] = useState(0);\n  const [algorithmState, setAlgorithmState] = useState(0);\n\n  const [sourceNode, setSourceNode] = useState<IGnode | null>(null);\n  const [clickedNode, setClickedNode] = useState<IGnode | null>(null);\n\n  const [autoIncrement, setAutoIncrement] = useState(false);\n\n  useEffect(() => {\n    if (clickedNode) handleNodeClickChange(clickedNode as IGnode);\n  }, [clickedNode]);\n\n  const handleNodeClick = useCallback((node) => {\n    setClickedNode(node);\n  }, []);\n\n  // create node\n  const createNodeOnClick = (e: MouseEvent<HTMLDivElement>) => {\n    if (modeState != 0) return;\n    if (inputData) {\n      const intValue = parseInt(inputData);\n      const nodeValue = intValue || inputData;\n      const newGnode = createGnode(nodeValue, {\n        x: e.pageX - (boardRef.current?.offsetLeft ?? 0) + (boardRef.current?.scrollLeft ?? 0),\n        y: e.pageY - (boardRef.current?.offsetTop ?? 0) + (boardRef.current?.scrollTop ?? 0),\n      });\n\n      props.addGnode(newGnode);\n      if ((intValue === 0 || intValue) && autoIncrement) {\n        setInputData(intValue + 1 + '');\n      }\n    }\n  };\n\n  let pathType: PathType = 'line';\n  // create path\n  const createPathOnClick = (sourceNode: IGnode, destinationNode: IGnode) => {\n    if (destinationNode.id === sourceNode.id) {\n      // no self loops for now\n      console.log('No self loops');\n      return;\n    }\n\n    // check if path already exists\n    const connections = props.nodeManager.graph.nodes[sourceNode.id].connections;\n    for (let i = 0; i < connections.length; i++) {\n      const conn = connections[i];\n      if (conn.nodeID === destinationNode.id) {\n        // path already exists\n        console.log('Path already exists');\n        return;\n      }\n    }\n\n    const destConnections = props.nodeManager.graph.nodes[destinationNode.id].connections;\n    for (let i = 0; i < destConnections.length; i++) {\n      const conn = destConnections[i];\n      if (conn.nodeID === sourceNode.id) {\n        // path already exists\n        pathType = 'curve';\n        break;\n      }\n    }\n\n    const newPath = createPath(sourceNode.id, destinationNode.id, pathType, parseInt(inputData));\n    props.addPath(newPath);\n    return;\n  };\n\n  const unselectSourceNode = () => {\n    if (!sourceNode) return;\n    const selectedNode = props.nodeManager.graph.nodes[sourceNode.id];\n    props.updateNode({ ...selectedNode, state: 'default' });\n    setSourceNode(null);\n  };\n\n  const handleNodeClickChange = (node: IGnode) => {\n    // node is selected : do stuff to handle that\n    switch (modeState) {\n      case 1:\n        if (!sourceNode) {\n          setSourceNode(node);\n          props.updateNode({ ...node, state: 'selected' });\n          return;\n        }\n        // update node pairs to create path\n        createPathOnClick(sourceNode, node);\n        unselectSourceNode();\n        break;\n\n      case 2:\n        // set node as root\n        if (props.nodeManager.graph.rootID !== node.id) props.setRoot(node.id);\n        else props.setRoot(undefined);\n        break;\n\n      case 3:\n        if (props.nodeManager.graph.destinationID !== node.id) props.setDestination(node.id);\n        else props.setDestination(undefined);\n        break;\n\n      default:\n        break;\n    }\n    setClickedNode(null);\n  };\n\n  const handleAlgoStart = () => {\n    switch (algorithmState) {\n      case 0:\n        bfs(props.nodeManager.graph, props.updateNode);\n        break;\n\n      case 1:\n        dfs(props.nodeManager.graph, props.updateNode);\n        break;\n\n      case 2:\n        dijkstra(props.nodeManager.graph, props.updateNode, props.updatePath);\n        break;\n\n      case 3:\n        groupGraph(props.nodeManager.graph, graphColors, [234, 252, 255, 1], props.updateNode);\n        break;\n\n      case 4:\n        bellmanford(props.nodeManager.graph, props.updatePath);\n        break;\n      default:\n        break;\n    }\n  };\n  const optionsMode = [\n    { key: 0, value: 'Create Node' },\n    { key: 1, value: 'Create Path' },\n    { key: 2, value: 'Set Root' },\n    { key: 3, value: 'Set Destination' },\n  ];\n  const optionsAlgorithm = [\n    { key: 0, value: 'BFS' },\n    { key: 1, value: 'DFS' },\n    { key: 2, value: 'Dijkstra' },\n    { key: 3, value: 'Group graph' },\n    { key: 4, value: 'Bellmanford' },\n  ];\n\n  // nodes not rerendering on state change\n\n  return (\n    <div className=\"nodemanager\">\n      <div className=\"left-panel\">\n        <input\n          type=\"text\"\n          className=\"left-panel-input small-box\"\n          value={inputData}\n          onChange={(e) => setInputData(e.target.value)}\n        />\n        <div className=\"left-panel-selection\">\n          <span>mode :</span>\n          <SelectSearch\n            options={optionsMode}\n            defaultSlectText=\"Select Mode\"\n            keyState={modeState}\n            onChange={(key) => setModeState(key as number)}\n          ></SelectSearch>\n        </div>\n        <div className=\"left-panel-selection\">\n          <span>algorithm :</span>\n          <SelectSearch\n            options={optionsAlgorithm}\n            defaultSlectText=\"Select Mode\"\n            keyState={algorithmState}\n            onChange={(key) => setAlgorithmState(key as number)}\n          ></SelectSearch>\n        </div>\n\n        <button className=\"left-panel-start small-box\" onClick={handleAlgoStart}>\n          start\n        </button>\n\n        <button className=\"small-box\" onClick={() => props.unvisitAll()}>\n          unvisit all\n        </button>\n\n        {modeState === 0 && (\n          <div className=\"left-panel-checkbox-wrapper\">\n            <label htmlFor=\"\">auto-increment</label>\n            <Checkbox isChecked={autoIncrement} onClick={() => setAutoIncrement(!autoIncrement)} />\n          </div>\n        )}\n      </div>\n      <div className=\"right-panel\" onClick={createNodeOnClick} ref={boardRef}>\n        {Object.values(props.nodeManager.graph.nodes).map((node) => (\n          <Gnode\n            key={node.id}\n            gnode={node}\n            _state={node.state + node.visited}\n            onClick={handleNodeClick}\n            isRoot={node.id === props.nodeManager.graph.rootID}\n            isDestination={node.id === props.nodeManager.graph.destinationID}\n          />\n        ))}\n        {Object.values(props.nodeManager.graph.paths).map((path) => (\n          <Path key={path.id} path={path} _state={path.state} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  nodeManager: state.NodeManager,\n});\nconst mapDispatchToProps = {\n  addGnode,\n  addPath,\n  setRoot,\n  updateNode,\n  unvisitAll,\n  updatePath,\n  setDestination,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(NodeManager);\n","import { v4 as uuidv4 } from 'uuid';\n\ntype PathState = 'default' | 'travel' | 'warn' | 'touched';\nexport type PathType = 'line' | 'curve' | 'self';\n\nexport interface IPath {\n  id: string;\n  sourceId: string;\n  destinationId: string;\n  state: PathState;\n  type: PathType;\n  weight?: number;\n}\n\nexport const createPath = (sourceId: string, destinationId: string, type: PathType, weight?: number): IPath => {\n  return {\n    id: uuidv4(),\n    sourceId,\n    destinationId,\n    state: 'default',\n    type,\n    weight: weight || undefined,\n  };\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { Position } from '../../sharedModels';\n\nimport { Color } from '../../sharedModels';\n\ntype NodeStates = 'default' | 'root' | 'selected' | 'touched' | 'grouped';\n\nexport interface Connection {\n  nodeID: string;\n  pathID: string;\n}\nexport interface IGnode {\n  id: string;\n  data: number | string;\n  visited: boolean;\n  state: NodeStates;\n  connections: Connection[];\n  pos: Position;\n  group?: {\n    id: string;\n    color: Color;\n  };\n}\n\nexport const createGnode = (data: number | string, pos: Position): IGnode => {\n  return {\n    id: uuidv4(),\n    data,\n    state: 'default',\n    visited: false,\n    connections: [],\n    pos,\n  };\n};\n","import React from 'react';\n\nimport { NodeManager } from './components/pages/main/nodeManager';\n\nimport './App.scss';\n\nconst App: React.FC<{}> = () => {\n  return <NodeManager></NodeManager>;\n};\n\nexport default App;\n","import { Reducer } from 'redux';\nimport { IPath } from '../path/models';\n\nimport { INodeManager } from './models';\nimport {\n  ADD_NODE,\n  ADD_PATH,\n  NodeMangerAction,\n  SET_DESTINATION,\n  SET_ROOT,\n  UNVISIT_ALL,\n  UPDATE_NODE,\n  UPDATE_PATH,\n} from './models/nodeManagerActionTypes';\n\nconst defaultState: INodeManager = {\n  graph: {\n    nodes: {},\n    paths: {},\n  },\n};\n\nexport const NodeManagerReducer: Reducer<INodeManager, NodeMangerAction> = (\n  state = defaultState,\n  action: NodeMangerAction,\n): INodeManager => {\n  const newState: INodeManager = { ...state };\n  switch (action.type) {\n    // adds a new node to state\n    case ADD_NODE: {\n      const newNode = action.payload.gnode;\n      newState.graph.nodes = { ...newState.graph.nodes, [newNode.id]: newNode };\n      return newState;\n    }\n    // adds a new path to state\n    case ADD_PATH: {\n      const newPath = action.payload.path;\n      newState.graph.paths = { ...newState.graph.paths, [newPath.id]: newPath };\n      const sourceOldConnections = newState.graph.nodes[newPath.sourceId].connections;\n      newState.graph.nodes[newPath.sourceId].connections = [\n        ...sourceOldConnections,\n        { nodeID: newPath.destinationId, pathID: newPath.id },\n      ];\n\n      return newState;\n    }\n    // might regret this later\n    case UPDATE_NODE: {\n      const { updatedNode } = action.payload;\n      const previousNode = newState.graph.nodes[updatedNode.id];\n      if (!previousNode) {\n        return state;\n      }\n      // update the node\n      newState.graph.nodes[updatedNode.id] = { ...previousNode, ...updatedNode };\n      return newState;\n    }\n    case UPDATE_PATH: {\n      const { updatedPath } = action.payload;\n      const previousPath: IPath = newState.graph.paths[updatedPath.id];\n      if (!previousPath) {\n        return state;\n      }\n      // update the path\n      newState.graph.paths[updatedPath.id] = { ...previousPath, ...updatedPath };\n      return newState;\n    }\n    case SET_ROOT: {\n      const { nodeID } = action.payload;\n\n      newState.graph.rootID = nodeID;\n      return newState;\n    }\n    case UNVISIT_ALL: {\n      Object.keys(newState.graph.nodes).forEach((nodeID) => {\n        newState.graph.nodes[nodeID].visited = false;\n        newState.graph.nodes[nodeID].state = 'default';\n      });\n      Object.keys(newState.graph.paths).forEach((pathID) => {\n        newState.graph.paths[pathID].state = 'default';\n      });\n      return newState;\n    }\n    case SET_DESTINATION: {\n      const { nodeID } = action.payload;\n\n      newState.graph.destinationID = nodeID;\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, Store } from 'redux';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { NodeManagerReducer } from './nodeManager/nodeManagerReducer';\n\nconst rootReducer = combineReducers({ NodeManager: NodeManagerReducer });\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport const rootStore: Store = createStore(rootReducer, composeWithDevTools());\nexport type AppDispatch = typeof rootStore.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { rootStore } from './store';\n\nimport './index.scss';\nimport './reset.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={rootStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}