{"version":3,"sources":["reportWebVitals.ts","dataStructures/queue.ts","store/nodeManager/algorithms/bfs.ts","store/nodeManager/models/nodeManagerActionTypes.ts","store/nodeManager/nodeManagerActions.ts","components/main/gnode/gnode.tsx","components/main/path/path.tsx","components/main/nodeManager/nodeManager.tsx","store/path/models/path.ts","store/gnode/models/gnode.ts","App.tsx","store/nodeManager/nodeManagerReducer.ts","store/rootStore.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Queue","queue","this","length","shift","element","push","bfs","graph","updateNode","rootID","console","log","q","visited","delay","curId","pop","cur","nodes","id","setTimeout","node","newNode","visitNode","connections","forEach","conn","nodeID","empty","ADD_NODE","UPDATE_NODE","ADD_PATH","SET_ROOT","updatedNode","type","payload","Gnode","props","style","left","gnode","pos","x","top","y","backgroundColor","className","onClick","onNodeSelect","data","mapDispatchToProps","Path","connect","connector","width","height","x1","path","sourcePos","y1","x2","destinationPos","y2","stroke","strokeWidth","addGnode","addPath","setRoot","state","nodeManager","NodeManager","useState","inputData","setInputData","panelState","setPanelState","boardRef","useRef","sourceNode","setSourceNode","updateNodePairs","source","destination","newPath","uuidv4","sourceId","destinationId","updateNodeSelection","value","onChange","e","target","nodeValue","parseInt","newGnode","pageX","current","offsetLeft","scrollLeft","pageY","offsetTop","scrollTop","ref","Object","values","map","paths","App","defaultState","rootReducer","combineReducers","action","newState","oldConnections","pathID","previousNode","rootStore","createStore","composeWithDevTools","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.32959560.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default class Queue<T> {\n  private queue: T[];\n\n  constructor() {\n    this.queue = [];\n  }\n\n  front(): T | undefined {\n    if (this.queue.length === 0) return undefined;\n    return this.queue[0];\n  }\n\n  pop(): T | undefined {\n    return this.queue.shift();\n  }\n\n  push(element: T) {\n    this.queue.push(element);\n  }\n\n  empty(): boolean {\n    return this.queue.length === 0;\n  }\n}\n","import Queue from '../../../dataStructures/queue';\nimport { IGnode } from '../../gnode/models';\nimport { IGraph } from '../models';\nimport { UpdateNodeAction } from '../models/nodeManagerActionTypes';\n\ninterface Visited {\n  [key: string]: boolean;\n}\n\nconst visitNode = (node: IGnode) => {\n  const newNode = { ...node };\n  newNode.visited = true;\n  return newNode;\n};\n\nexport const bfs = (graph: IGraph, updateNode: (x: IGnode) => UpdateNodeAction) => {\n  if (!graph.rootID) {\n    console.log('Root is not set');\n    return;\n  }\n\n  console.log('Starting BFS');\n\n  const q = new Queue<string>();\n  q.push(graph.rootID);\n\n  const visited: Visited = {};\n\n  let delay: number = 0;\n\n  while (!q.empty()) {\n    const curId = q.pop() as string;\n    console.log(curId);\n    const cur = graph.nodes[curId];\n    visited[cur.id] = true;\n\n    setTimeout(() => {\n      updateNode(visitNode(cur));\n    }, delay);\n\n    delay += 300;\n\n    graph.nodes[cur.id].connections.forEach((conn) => {\n      if (!visited[conn.nodeID]) q.push(conn.nodeID);\n    });\n  }\n\n  console.log('BFS finished');\n};\n","import { IGnode } from '../../gnode/models';\nimport { IPath } from '../../path/models';\n\n// ACTION TYPES\nexport const ADD_NODE = 'ADD_NODE';\nexport interface AddGnodeAction {\n  type: typeof ADD_NODE;\n  payload: { gnode: IGnode };\n}\nexport const REMOVE_NODE = 'REMOVE_NODE';\nexport interface RemoveGnodeAction {\n  type: typeof REMOVE_NODE;\n  payload: { nodeID: string };\n}\nexport const UPDATE_NODE = 'UPDATE_NODE';\n\nexport interface UpdateNodeAction {\n  type: typeof UPDATE_NODE;\n  payload: { updatedNode: IGnode };\n}\n\nexport const ADD_PATH = 'ADD_PATH';\n\nexport interface AddPathAction {\n  type: typeof ADD_PATH;\n  payload: { path: IPath };\n}\nexport const REMOVE_PATH = 'REMOVE_PATH';\nexport interface RemovePathAction {\n  type: typeof REMOVE_PATH;\n  payload: { pathID: string };\n}\n\nexport const SET_ROOT = 'SET_ROOT';\nexport interface SetRootAction {\n  type: typeof SET_ROOT;\n  payload: { nodeID: string };\n}\n\nexport type NodeMangerAction =\n  | AddGnodeAction\n  | RemoveGnodeAction\n  | AddPathAction\n  | RemovePathAction\n  | UpdateNodeAction\n  | SetRootAction;\n","// action creator\n\nimport { IGnode } from '../gnode/models';\nimport { IPath } from '../path/models';\nimport {\n  AddGnodeAction,\n  ADD_NODE,\n  AddPathAction,\n  ADD_PATH,\n  UpdateNodeAction,\n  UPDATE_NODE,\n  SetRootAction,\n  SET_ROOT,\n} from './models/nodeManagerActionTypes';\n\nexport const addGnode = (gnode: IGnode): AddGnodeAction => ({\n  type: ADD_NODE,\n  payload: { gnode },\n});\n\nexport const addPath = (path: IPath): AddPathAction => ({\n  type: ADD_PATH,\n  payload: { path },\n});\n\nexport const updateNode = (updatedNode: IGnode): UpdateNodeAction => ({\n  type: UPDATE_NODE,\n  payload: { updatedNode },\n});\n\nexport const setRoot = (nodeID: string): SetRootAction => ({\n  type: SET_ROOT,\n  payload: { nodeID },\n});\n","import React, { CSSProperties } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { IGnode } from '../../../store/gnode/models';\n\nimport { updateNode } from '../../../store/nodeManager/nodeManagerActions';\n\nimport './gnode.scss';\n\ninterface Props extends PropsFromRedux {\n  gnode: IGnode;\n  onNodeSelect: (node: IGnode) => void;\n}\n\nexport const Gnode: React.FC<Props> = (props: Props) => {\n  const style: CSSProperties = {\n    left: props.gnode.pos.x,\n    top: props.gnode.pos.y,\n    backgroundColor: props.gnode.visited ? 'green' : 'red',\n  };\n\n  const handleOnClick = () => {\n    props.onNodeSelect(props.gnode);\n  };\n\n  return (\n    <div className=\"gnode\" style={style} onClick={handleOnClick}>\n      <span className=\"gnode-content\">{props.gnode.data}</span>\n    </div>\n  );\n};\n\nconst mapStateToProps = () => ({});\nconst mapDispatchToProps = {\n  updateNode,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Gnode);\n","import React from 'react';\nimport { IPath } from '../../../store/path/models';\n\ninterface Props {\n  path: IPath;\n}\n\nexport const Path: React.FC<Props> = (props) => {\n  return (\n    <svg width=\"100%\" height=\"100%\">\n      <line\n        x1={props.path.sourcePos.x + 50}\n        y1={props.path.sourcePos.y + 50}\n        x2={props.path.destinationPos.x + 50}\n        y2={props.path.destinationPos.y + 50}\n        style={{ stroke: 'rgb(255,0,0)', strokeWidth: '2' }}\n      />\n    </svg>\n  );\n};\n","import React, { MouseEvent, useRef, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { createGnode, IGnode } from '../../../store/gnode/models';\nimport { bfs } from '../../../store/nodeManager/algorithms/bfs';\nimport { addGnode, addPath, setRoot, updateNode } from '../../../store/nodeManager/nodeManagerActions';\nimport { createPath } from '../../../store/path/models';\nimport { AppState } from '../../../store/rootStore';\nimport { Gnode } from '../gnode';\nimport { Path } from '../path';\n\nimport './nodemanager.scss';\n\ninterface Props extends PropsFromRedux {}\n\nconst NodeManager: React.FC<Props> = (props: Props) => {\n  const [inputData, setInputData] = useState('');\n  const [panelState, setPanelState] = useState(0);\n  const boardRef = useRef<HTMLDivElement>(null);\n\n  const createNodeOnClick = (e: MouseEvent<HTMLDivElement>) => {\n    if (panelState != 0) return;\n    if (inputData) {\n      const nodeValue = parseInt(inputData);\n      if (!nodeValue) return;\n      const newGnode = createGnode(nodeValue, {\n        x: e.pageX - (boardRef.current?.offsetLeft ?? 0) - 50 + (boardRef.current?.scrollLeft ?? 0),\n        y: e.pageY - (boardRef.current?.offsetTop ?? 0) - 50 + (boardRef.current?.scrollTop ?? 0),\n      });\n      props.addGnode(newGnode);\n    }\n  };\n\n  const [sourceNode, setSourceNode] = useState<IGnode | null>(null);\n\n  const updateNodePairs = (node: IGnode) => {\n    if (panelState != 1) return;\n    if (!sourceNode) {\n      setSourceNode(node);\n      return;\n    }\n    // source is set\n\n    // check if path already exists\n    const connections = props.nodeManager.graph.nodes[sourceNode.id].connections;\n    connections.forEach((conn) => {\n      if (conn.nodeID === node.id) {\n        // path already exists\n        setSourceNode(null);\n        return;\n      }\n    });\n\n    // const newPath = createPath();\n    // updateGnode  -> connections updated\n    // updateGraph  -> adding path to paths\n    const newPath = createPath(sourceNode, node);\n    props.addPath(newPath);\n    setSourceNode(null);\n  };\n\n  const updateNodeSelection = (node: IGnode) => {\n    // node is selected : do stuff to handle that\n    switch (panelState) {\n      case 1:\n        // update node pairs to create path\n        updateNodePairs(node);\n        break;\n      case 2:\n        // set node as root\n        props.setRoot(node.id);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // 0 -> create node\n  // 1 -> create path\n  // 2 -> set Root\n  return (\n    <div className=\"nodemanager\">\n      <div className=\"panel\">\n        <input type=\"text\" value={inputData} onChange={(e) => setInputData(e.target.value)} />\n        <button onClick={() => setPanelState(0)}>create node</button>\n        <button onClick={() => setPanelState(1)}>create path</button>\n        <button onClick={() => setPanelState(2)}>set root</button>\n        <button onClick={() => bfs(props.nodeManager.graph, props.updateNode)}>bfs</button>\n      </div>\n      <div className=\"board\" onClick={createNodeOnClick} ref={boardRef}>\n        {Object.values(props.nodeManager.graph.nodes).map((node) => (\n          //! FIX : need to pass updateNode here or typescript starts crying\n          <Gnode key={node.id} gnode={node} onNodeSelect={updateNodeSelection} updateNode={updateNode} />\n        ))}\n        {Object.values(props.nodeManager.graph.paths).map((path) => (\n          <Path key={path.id} path={path} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  nodeManager: state.NodeManager,\n});\nconst mapDispatchToProps = {\n  addGnode,\n  addPath,\n  setRoot,\n  updateNode,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(NodeManager);\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { Position } from '../../sharedModels';\n\nexport interface IPath {\n  id: string;\n  sourceId: string;\n  destinationId: string;\n  sourcePos: Position;\n  destinationPos: Position;\n}\n\nexport const createPath = (\n  source: { id: string; pos: Position },\n  destination: { id: string; pos: Position },\n): IPath => {\n  return {\n    id: uuidv4(),\n    sourceId: source.id,\n    destinationId: destination.id,\n    sourcePos: source.pos,\n    destinationPos: destination.pos,\n  };\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { Position } from '../../sharedModels';\n\nexport interface Connection {\n  nodeID: string;\n  pathID: string;\n}\nexport interface IGnode {\n  id: string;\n  data: number;\n  visited: boolean;\n  connections: Connection[];\n  pos: Position;\n}\n\nexport const createGnode = (data: number, pos: Position): IGnode => {\n  return {\n    id: uuidv4(),\n    data,\n    visited: false,\n    connections: [],\n    pos,\n  };\n};\n","import React from 'react';\n\nimport { NodeManager } from './components/main/nodeManager';\n\nimport './App.scss';\n\nconst App: React.FC<{}> = () => {\n  return <NodeManager></NodeManager>;\n};\n\nexport default App;\n","import { Reducer } from 'redux';\n\nimport { INodeManager } from './models';\nimport { ADD_NODE, ADD_PATH, NodeMangerAction, SET_ROOT, UPDATE_NODE } from './models/nodeManagerActionTypes';\n\nconst defaultState: INodeManager = {\n  graph: {\n    nodes: {},\n    paths: {},\n  },\n};\n\nexport const NodeManagerReducer: Reducer<INodeManager, NodeMangerAction> = (\n  state = defaultState,\n  action: NodeMangerAction,\n): INodeManager => {\n  const newState: INodeManager = { ...state };\n  switch (action.type) {\n    // adds a new node to state\n    case ADD_NODE:\n      const newNode = action.payload.gnode;\n      newState.graph.nodes = { ...newState.graph.nodes, [newNode.id]: newNode };\n      return newState;\n\n    // adds a new path to state\n    case ADD_PATH:\n      const newPath = action.payload.path;\n      newState.graph.paths = { ...newState.graph.paths, [newPath.id]: newPath };\n      const oldConnections = newState.graph.nodes[newPath.sourceId].connections;\n      newState.graph.nodes[newPath.sourceId].connections = [\n        ...oldConnections,\n        { nodeID: newPath.destinationId, pathID: newPath.id },\n      ];\n      return newState;\n\n    // might regret this later\n    case UPDATE_NODE:\n      const { updatedNode } = action.payload;\n      const previousNode = newState.graph.nodes[updatedNode.id];\n      if (!previousNode) {\n        return state;\n      }\n      // update the node\n      newState.graph.nodes[updatedNode.id] = { ...previousNode, ...updatedNode };\n      return newState;\n\n    case SET_ROOT:\n      const { nodeID } = action.payload;\n      if (!newState.graph.nodes[nodeID]) {\n        return state;\n      }\n      newState.graph.rootID = nodeID;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, Store } from 'redux';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { NodeManagerReducer } from './nodeManager/nodeManagerReducer';\n\nconst rootReducer = combineReducers({ NodeManager: NodeManagerReducer });\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport const rootStore: Store = createStore(rootReducer, composeWithDevTools());\nexport type AppDispatch = typeof rootStore.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { rootStore } from './store';\n\nimport './index.scss';\nimport './reset.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={rootStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}