{"version":3,"sources":["reportWebVitals.ts","store/nodeManager/models/nodeManagerActionTypes.ts","components/main/gnode/gnode.tsx","components/main/nodeManager/nodeManager.tsx","store/nodeManager/nodeManagerActions.ts","store/gnode/models/gnode.ts","App.tsx","store/nodeManager/nodeManagerReducer.ts","store/rootStore.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_NODE","Gnode","props","style","left","gnode","pos","x","top","y","className","data","mapDispatchToProps","addGnode","type","payload","connector","connect","state","nodeManager","NodeManager","useState","inputData","setInputData","boardRef","useRef","value","onChange","e","target","onClick","console","log","clientX","clientY","current","offsetLeft","offsetTop","newGnode","id","uuidv4","visited","connections","createGnode","parseInt","pageX","scrollLeft","pageY","scrollTop","ref","graph","nodes","map","node","App","defaultState","rootReducer","combineReducers","action","newState","push","rootStore","createStore","composeWithDevTools","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"qPAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCNDQ,EAAW,W,eCOXC,EAAyB,SAACC,GACrC,IAAMC,EAAuB,CAC3BC,KAAMF,EAAMG,MAAMC,IAAIC,EACtBC,IAAKN,EAAMG,MAAMC,IAAIG,GAGvB,OACE,qBAAKC,UAAU,QAAQP,MAAOA,EAA9B,SACE,sBAAMO,UAAU,gBAAhB,SAAiCR,EAAMG,MAAMM,UC0B7CC,G,MAAqB,CACzBC,SCxCsB,SAACR,GAAD,MAAoC,CAC1DS,KAAMd,EACNe,QAAS,CAAEV,aD4CEW,EAHGC,aAPM,SAACC,GAAD,MAAsB,CAC5CC,YAAaD,EAAME,eAMsBR,EAG5BI,EAvCsB,SAACd,GAAkB,IAAD,EACnBmB,mBAAS,IADU,mBAC9CC,EAD8C,KACnCC,EADmC,KAE/CC,EAAWC,iBAAuB,MAaxC,OACE,sBAAKf,UAAU,cAAf,UACE,qBAAKA,UAAU,QAAf,SACE,uBAAOI,KAAK,OAAOY,MAAOJ,EAAWK,SAAU,SAACC,GAAD,OAAOL,EAAaK,EAAEC,OAAOH,YAE9E,qBAAKhB,UAAU,QAAQoB,QAhBD,SAACF,GACzB,GAAIN,EAAW,CAAC,IAAD,oBACbS,QAAQC,IAAIJ,EAAEK,QAASL,EAAEM,QAAzB,UAAkCV,EAASW,eAA3C,aAAkC,EAAkBC,WAApD,UAAgEZ,EAASW,eAAzE,aAAgE,EAAkBE,WAClF,IAAMC,EENe,SAAC3B,GAAgD,IAAlCL,EAAiC,uDAA3B,CAAEC,EAAG,EAAGE,EAAG,GACzD,MAAO,CACL8B,GAAIC,cACJ7B,OACA8B,SAAS,EACTC,YAAa,GACbpC,OFAmBqC,CAAYC,SAAStB,GAAY,CAChDf,EAAGqB,EAAEiB,OAAF,oBAAWrB,EAASW,eAApB,aAAW,EAAkBC,kBAA7B,QAA2C,GAAK,IAAhD,oBAAsDZ,EAASW,eAA/D,aAAsD,EAAkBW,kBAAxE,QAAsF,GACzFrC,EAAGmB,EAAEmB,OAAF,oBAAWvB,EAASW,eAApB,aAAW,EAAkBE,iBAA7B,QAA0C,GAAK,IAA/C,oBAAqDb,EAASW,eAA9D,aAAqD,EAAkBa,iBAAvE,QAAoF,KAEzF9C,EAAMW,SAASyB,KASoCW,IAAKzB,EAAxD,SACGtB,EAAMiB,YAAY+B,MAAMC,MAAMC,KAAI,SAACC,GAAD,OACjC,cAAC,EAAD,CAAOhD,MAAOgD,GAAWA,EAAKd,eGxBzBe,G,MAJW,WACxB,OAAO,cAAC,EAAD,M,uBCHHC,EAA6B,CACjCL,MAAO,CACLC,MAAO,KCDLK,EAAcC,0BAAgB,CAAErC,YDKqC,WAGvD,IAFlBF,EAEiB,uDAFTqC,EACRG,EACiB,uCACXC,EAAsB,eAAQzC,GACpC,OAAQwC,EAAO5C,MACb,KAAKd,EAEH,OADA2D,EAAST,MAAMC,MAAMS,KAAKF,EAAO3C,QAAQV,OAClCsD,EACT,QACE,OAAOzC,MCZA2C,EAAmBC,sBAAYN,EAAaO,iC,YCGzDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAON,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1B9E,EAAgBwC,QAAQC,O","file":"static/js/main.18c2c747.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { IGnode } from '../../gnode/models';\n\n// ACTION TYPES\nexport const ADD_NODE = 'ADD_NODE';\nexport const REMOVE_NODE = 'REMOVE_NODE';\n\nexport interface AddGnodeAction {\n  type: typeof ADD_NODE;\n  payload: {\n    gnode: IGnode;\n  };\n}\n\nexport interface RemoveGnodeAction {\n  type: typeof REMOVE_NODE;\n  payload: {\n    gnode: IGnode;\n  };\n}\nexport type NodeMangerAction = AddGnodeAction | RemoveGnodeAction;\n","import React, { CSSProperties } from 'react';\n\nimport { IGnode } from '../../../store/gnode/models';\n\nimport './gnode.scss';\n\ninterface Props {\n  gnode: IGnode;\n}\n\nexport const Gnode: React.FC<Props> = (props: Props) => {\n  const style: CSSProperties = {\n    left: props.gnode.pos.x,\n    top: props.gnode.pos.y,\n  };\n\n  return (\n    <div className=\"gnode\" style={style}>\n      <span className=\"gnode-content\">{props.gnode.data}</span>\n    </div>\n  );\n};\n","import React, { MouseEvent, useRef, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { createGnode } from '../../../store/gnode/models';\nimport { addGnode } from '../../../store/nodeManager/nodeManagerActions';\nimport { AppState } from '../../../store/rootStore';\nimport { Gnode } from '../gnode';\n\nimport './nodemanager.scss';\n\ninterface Props extends PropsFromRedux {}\n\nconst NodeManager: React.FC<Props> = (props: Props) => {\n  const [inputData, setInputData] = useState('');\n  const boardRef = useRef<HTMLDivElement>(null);\n\n  const createNodeOnClick = (e: MouseEvent<HTMLDivElement>) => {\n    if (inputData) {\n      console.log(e.clientX, e.clientY, boardRef.current?.offsetLeft, boardRef.current?.offsetTop);\n      const newGnode = createGnode(parseInt(inputData), {\n        x: e.pageX - (boardRef.current?.offsetLeft ?? 0) - 50 + (boardRef.current?.scrollLeft ?? 0),\n        y: e.pageY - (boardRef.current?.offsetTop ?? 0) - 50 + (boardRef.current?.scrollTop ?? 0),\n      });\n      props.addGnode(newGnode);\n    }\n  };\n\n  return (\n    <div className=\"nodemanager\">\n      <div className=\"panel\">\n        <input type=\"text\" value={inputData} onChange={(e) => setInputData(e.target.value)} />\n      </div>\n      <div className=\"board\" onClick={createNodeOnClick} ref={boardRef}>\n        {props.nodeManager.graph.nodes.map((node) => (\n          <Gnode gnode={node} key={node.id} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  nodeManager: state.NodeManager,\n});\nconst mapDispatchToProps = {\n  addGnode: addGnode,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(NodeManager);\n","// action creator\n\nimport { IGnode } from '../gnode/models';\nimport { AddGnodeAction, ADD_NODE } from './models/nodeManagerActionTypes';\n\nexport const addGnode = (gnode: IGnode): AddGnodeAction => ({\n  type: ADD_NODE,\n  payload: { gnode },\n});\n","import { v4 as uuidv4 } from 'uuid';\n\nexport interface IGnode {\n  id: string;\n  data: number;\n  visited: boolean;\n  connections: number[];\n  pos: {\n    x: number;\n    y: number;\n  };\n}\n\nexport const createGnode = (data: number, pos = { x: 0, y: 0 }): IGnode => {\n  return {\n    id: uuidv4(),\n    data,\n    visited: false,\n    connections: [],\n    pos,\n  };\n};\n","import React from 'react';\n\nimport { NodeManager } from './components/main/nodeManager';\n\nimport './App.scss';\n\nconst App: React.FC<{}> = () => {\n  return <NodeManager></NodeManager>;\n};\n\nexport default App;\n","import { Reducer } from 'redux';\nimport { INodeManager } from './models';\nimport { ADD_NODE, NodeMangerAction } from './models/nodeManagerActionTypes';\n\nconst defaultState: INodeManager = {\n  graph: {\n    nodes: [],\n  },\n};\n\nexport const NodeManagerReducer: Reducer<INodeManager, NodeMangerAction> = (\n  state = defaultState,\n  action: NodeMangerAction,\n): INodeManager => {\n  const newState: INodeManager = { ...state };\n  switch (action.type) {\n    case ADD_NODE:\n      newState.graph.nodes.push(action.payload.gnode);\n      return newState;\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, Store } from 'redux';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { NodeManagerReducer } from './nodeManager/nodeManagerReducer';\n\nconst rootReducer = combineReducers({ NodeManager: NodeManagerReducer });\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport const rootStore: Store = createStore(rootReducer, composeWithDevTools());\nexport type AppDispatch = typeof rootStore.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { rootStore } from './store';\n\nimport './index.scss';\nimport './reset.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={rootStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}